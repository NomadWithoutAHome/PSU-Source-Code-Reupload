--[[
	id: VqRwnwtVuLbn3HZweTWFV
	name: Flex 投掷物助手 v2.lua
	description: Flex 投掷物助手 v2.lua
	time1: 2021-07-20 17:24:13.987244+00
	time2: 2021-07-20 17:24:13.98725+00
	uploader: W5O82ec_A3LcpaRoZ35sgJs24Y21lxrx5b4NJtLX
	uploadersession: fTDj-0CO-VZgYUal0k8vj7iutTnFAy
	flag: f
--]]

ffi.cdef[[
	unsigned long GetFileAttributesA(const char* lpFileName);

	bool CreateDirectoryA(const char* lpPathName, void* lpSecurityAttributes);
	
	void* CreateFileA(const char* lpFileName, unsigned long dwDesiredAccess, unsigned long dwShareMode, unsigned long lpSecurityAttributes,
        unsigned long dwCreationDisposition, unsigned long dwFlagsAndAttributes, void* hTemplateFile);
	
	void* CloseHandle(void *hFile);
	
    unsigned long GetFileSize(void* hFile, unsigned long* lpFileSizeHigh);

	bool ReadFile(void* hFile, char* lpBuffer, unsigned long nNumberOfBytesToRead, unsigned long* lpNumberOfBytesRead, int lpOverlapped);
]]

local nade_icons_texture = 
{
	{
		0,
		15,
		draw.CreateTexture(common.RasterizeSVG('<svg xmlns="http://www.w3.org/2000/svg" width="18.833" height="32"><g><path fill-rule="evenodd" clip-rule="evenodd" fill="#FFF" fill-opacity=".6" d="M15.826,7.595 c0.05,0.074,0.185,0.259,0.407,0.554c0.172,0.224,0.308,0.285,0.406,0.186c0.099-0.099,0-0.382-0.295-0.851 c-0.321-0.493-0.271-1.035,0.148-1.628c0.049,0.247,0.345,0.617,0.888,1.11c0.543,0.518,0.875,1.023,0.999,1.517 c0.049,0.246,0.061,0.493,0.037,0.739c-0.049,0.37-0.148,0.666-0.295,0.888c-0.247,0.321-0.382,0.53-0.407,0.63 c-0.075,0.173-0.013,0.382,0.185,0.629c0.172,0.245,0.123,0.578-0.148,0.998c-0.173,0.246-0.567,0.715-1.183,1.405 c-0.355,0.396-0.879,0.618-1.573,0.666c0.172-0.279,0.351-0.575,0.537-0.887c0.099,0,0.161-0.014,0.186-0.038l1.11-1.517 c0.049-0.099-0.014-0.259-0.186-0.48c-0.197-0.222-0.456-0.456-0.776-0.704c-0.32-0.22-0.617-0.381-0.888-0.48 c-0.295-0.122-0.469-0.136-0.518-0.036l-1.11,1.517h0.038c-0.024,0.05-0.024,0.123,0,0.221c-0.425,0.508-0.801,0.957-1.128,1.351 c-0.036-0.027-0.067-0.059-0.093-0.091c-0.198-0.271-0.382-0.642-0.555-1.11c-0.197-0.666-0.234-1.208-0.111-1.627 c0.198-0.371,0.345-0.642,0.444-0.815c0.173-0.345,0.173-0.813,0-1.405l0.407,0.148c0.32,0.173,0.555,0.444,0.702,0.813 c0.075,0.124,0.111,0.457,0.111,0.999c0,0.418,0.011,0.555,0.037,0.406c0.295-0.394,0.48-0.801,0.554-1.22 c0.025-0.246-0.135-0.629-0.48-1.147c-0.443-0.542-0.714-0.888-0.813-1.035c-0.148-0.223-0.21-0.739-0.186-1.553 c0.025-0.839,0.148-1.369,0.37-1.591c0.05,0.518,0.271,0.974,0.666,1.368c0.198,0.196,0.728,0.419,1.59,0.666 c0.346,0.099,0.555,0.309,0.629,0.629C15.653,7.262,15.752,7.52,15.826,7.595z"/><path fill-rule="evenodd" clip-rule="evenodd" fill="#FFF" d="M14.975,10.331c0.271,0.1,0.568,0.261,0.888,0.48 c0.32,0.248,0.58,0.482,0.776,0.704c0.172,0.222,0.235,0.382,0.186,0.48l-1.11,1.517c-0.025,0.024-0.087,0.038-0.186,0.038 c-1.356,2.269-2.158,3.574-2.404,3.92c-0.099,0.122-0.21,0.803-0.334,2.034c-0.147,1.208-0.406,2.084-0.776,2.626L5.58,31.157 c-0.197,0.172-0.641,0.185-1.332,0.037c-0.739-0.197-1.455-0.543-2.144-1.037c-0.691-0.491-1.246-1.06-1.666-1.7 c-0.37-0.593-0.505-1.011-0.407-1.259l6.437-9.062c0.37-0.544,1.11-1.072,2.22-1.591c0.271-0.123,0.641-0.296,1.109-0.518 c0.346-0.173,0.567-0.32,0.667-0.443c0.148-0.224,1.122-1.406,2.922-3.553c-0.024-0.098-0.024-0.171,0-0.221h-0.038l1.11-1.517 C14.506,10.195,14.679,10.209,14.975,10.331z"/></g></svg>')),
	},
	{
		2,
		14,
		draw.CreateTexture(common.RasterizeSVG('<svg xmlns="http://www.w3.org/2000/svg" width="12.333" height="32"><path fill-rule="evenodd" clip-rule="evenodd" fill="#FFF" d="M8.413,6.784L8.449,6.82v0.073c0,0.025,0.013,0.036,0.036,0.036 v0.074h0.037v0.035c0.024,0,0.038,0.013,0.038,0.036v0.11h0.036v0.073h0.036v0.073c0.024,0,0.037,0.012,0.037,0.035v0.11 l0.036,0.036v0.072L8.74,7.622v0.036h0.038v0.073l0.036,0.036v0.037c0.025,0,0.036,0.012,0.036,0.036v0.036l0.037,0.037v0.109 c0,0.023,0.012,0.036,0.036,0.036v0.037h0.037v0.108h0.036v0.037l0.037,0.036v0.037l0.036,0.035v0.074l0.037,0.036v0.107 l0.037,0.038v0.037l0.036,0.035v0.037L9.25,8.789v0.035c0.024,0,0.037,0.014,0.037,0.037l0.035,0.037V9.08L9.36,9.117v0.072 l0.038,0.036v0.036l0.035,0.037v0.037L9.47,9.371v0.072h0.036v0.074c0,0.024,0.013,0.036,0.036,0.036v0.108 c0.025,0,0.037,0.013,0.037,0.037v0.073c0.024,0,0.037,0.013,0.037,0.037v0.072h0.037v0.036l0.036,0.037v0.036l0.037,0.036v0.037 l0.037,0.036v0.146l0.036,0.037v0.072h0.037v0.108h0.037v0.073l0.036,0.037v0.037l0.037,0.036v0.073 c0.024,0,0.036,0.011,0.036,0.035v0.073c0,0.024,0.012,0.037,0.037,0.037v0.072l0.036,0.036v0.037h0.038v0.036l0.036,0.037v0.036 l0.037,0.036v0.073h0.037v0.108l0.037,0.036v0.037c0,0.023,0.011,0.036,0.036,0.036v0.036l0.037,0.037v0.109l0.072,0.072v0.073 l0.037,0.037v0.036h0.036v0.073h0.037c0,0.023,0.012,0.036,0.036,0.036v0.036l0.147,0.146v0.474l0.036,0.035v0.074 c0.023,0,0.035,0.012,0.035,0.035l0.039,0.037v0.036l0.035,0.036v0.036h0.037v0.075c0.024,0,0.037,0.011,0.037,0.035l0.036,0.037 v0.035h0.036v0.037l0.073,0.073c0,0.023,0.012,0.036,0.037,0.036v0.036h0.037v0.036l0.109,0.146v0.255 c0.024,0.025,0.047,0.036,0.073,0.036v0.474c0,0.098,0,0.17,0,0.22c0,0.072,0,0.145,0,0.218v0.184c0,0.071,0,0.144,0,0.218v0.182 c0,0.097,0,0.183,0,0.256c0,0.047,0,0.12,0,0.219c0,0.048,0,0.121,0,0.218c0,0.049,0,0.108,0,0.182v0.036c0,0.049,0,0.11,0,0.184 c0,0.048,0,0.121,0,0.219c0,0.048,0,0.121,0,0.219c0,0.049,0,0.108,0,0.182c0,0.072,0,0.146,0,0.218c0,0.073,0,0.146,0,0.219 c0,0.073,0,0.147,0,0.22c0,0.073,0,0.133,0,0.182c0,0.097,0,0.17,0,0.219c0,0.073,0,0.146,0,0.218c0,0.073,0,0.146,0,0.221 c0,0.071,0,0.133,0,0.181c0,0.098,0,0.17,0,0.219c0,0.073,0,0.146,0,0.219c0,0.073,0,0.146,0,0.219c0,0.073,0,0.146,0,0.219 s0,0.146,0,0.218c0,0.05,0,0.122,0,0.22c0,0.049,0,0.12,0,0.219c0,0.049,0,0.109,0,0.182c0,0.073,0,0.146,0,0.218 c0,0.05,0,0.122,0,0.219c0,0.049,0,0.122,0,0.22c0,0.048,0,0.108,0,0.182s0,0.146,0,0.22c0,0.072,0,0.145,0,0.217 c0,0.073,0,0.146,0,0.22s0,0.134,0,0.182c0,0.098,0,0.171,0,0.219c0,0.073,0,0.146,0,0.219c0,0.073,0,0.146,0,0.219 c0,0.073,0,0.133,0,0.183c0,0.096,0,0.17,0,0.218c0,0.073,0,0.146,0,0.22c0,0.072,0,0.145,0,0.218s0,0.146,0,0.219 c0,0.073,0,0.146,0,0.219c0,0.049,0,0.121,0,0.219c0,0.049,0,0.122,0,0.219c0,0.049,0,0.108,0,0.182c0,0.072,0,0.146,0,0.22 c0,0.047,0,0.121,0,0.218c0,0.048,0,0.122,0,0.219c0,0.048,0,0.108,0,0.182c0,0.074,0,0.146,0,0.219c0,0.073,0,0.146,0,0.219 c0,0.073,0,0.146,0,0.219c0,0.073,0,0.134,0,0.183c0,0.096,0,0.17,0,0.219c0,0.072,0,0.146,0,0.219c0,0.072,0,0.146,0,0.218 c0,0.073,0,0.134,0,0.183c0,0.098,0,0.17,0,0.219c0,0.073,0,0.146,0,0.219c0,0.072,0,0.158,0,0.256v0.072 c-0.025,0-0.061,0-0.109,0v0.035c-0.025,0-0.037,0.013-0.037,0.036l-0.036,0.074h-0.074v0.035L11,28.065v0.036h-0.037v0.072 c-0.169,0-0.34,0-0.509,0v-0.583l0.072-0.072c0.024,0,0.037-0.014,0.037-0.037h0.036v-0.036h0.036v-0.036h0.038 c0-0.073,0-0.135,0-0.183c0-0.072,0-0.121,0-0.146c0-0.073,0-0.145,0-0.218c0-0.072,0-0.147,0-0.22c0-0.071,0-0.146,0-0.219 c0-0.072,0-0.146,0-0.218c0-0.049,0-0.123,0-0.219c0-0.049,0-0.109,0-0.184c0-0.072,0-0.145,0-0.219c0-0.072,0-0.146,0-0.218 c0-0.048,0-0.121,0-0.219c0-0.048,0-0.108,0-0.182s0-0.146,0-0.219c0-0.072,0-0.146,0-0.22c0-0.071,0-0.145,0-0.219 c0-0.072,0-0.133,0-0.181c0-0.098,0-0.171,0-0.219c0-0.097,0-0.171,0-0.219c0-0.073,0-0.146,0-0.22c0-0.071,0-0.133,0-0.181 c0-0.098,0-0.171,0-0.22c0-0.097,0-0.17,0-0.218c0-0.073,0-0.146,0-0.22c0-0.072,0-0.145,0-0.219c0-0.072,0-0.145,0-0.219 c0-0.072,0-0.145,0-0.218c0-0.048,0-0.122,0-0.219c0-0.049,0-0.109,0-0.182c0-0.073,0-0.146,0-0.219s0-0.146,0-0.219 c0-0.049,0-0.121,0-0.22c0-0.049,0-0.108,0-0.182s0-0.146,0-0.219c0-0.097,0-0.17,0-0.218c0-0.074,0-0.146,0-0.22 c0-0.072,0-0.133,0-0.182c0-0.097,0-0.17,0-0.219c0-0.097,0-0.17,0-0.218c0-0.073,0-0.146,0-0.219c0-0.073,0-0.135,0-0.183 c0-0.097,0-0.182,0-0.256c0-0.072,0-0.145,0-0.218c0-0.05,0-0.122,0-0.219c0-0.049,0-0.109,0-0.182c0-0.073,0-0.146,0-0.22 c0-0.072,0-0.145,0-0.218c0-0.049,0-0.121,0-0.218c0-0.051,0-0.11,0-0.184s0-0.146,0-0.219c0-0.072,0-0.146,0-0.22 c0-0.071,0-0.144,0-0.218c0-0.072,0-0.133,0-0.182c0-0.098,0-0.17,0-0.22c0-0.097,0-0.169,0-0.218c0-0.073,0-0.146,0-0.218 c0-0.073,0-0.135,0-0.183c0-0.097,0-0.171,0-0.219c0-0.097,0-0.171,0-0.219c0-0.073,0-0.146,0-0.219c0-0.073,0-0.146,0-0.218 c0-0.073,0-0.146,0-0.22c0-0.072,0-0.145,0-0.218c0-0.049,0-0.122,0-0.22c0-0.048,0-0.108,0-0.182v-0.036 c-0.025,0-0.05,0-0.074,0l-0.036-0.037v-0.036l-0.037-0.036V13.78H10.49v-0.036l-0.037-0.036v-0.036l-0.036-0.037v-0.072 l-0.037-0.037v-0.036h-0.037v-0.073h-0.036V13.38l-0.037-0.036h-0.036c0-0.025-0.012-0.037-0.037-0.037v-0.072 c0-0.025-0.013-0.036-0.037-0.036v-0.037h-0.037v-0.073c-0.023,0-0.036-0.012-0.036-0.035c0-0.025-0.013-0.037-0.038-0.037V12.98 h-0.036v-0.037l-0.037-0.074c0-0.023-0.012-0.036-0.036-0.036v-0.036l-0.109-0.072v-0.037H9.797v-0.072 c-0.024,0-0.036-0.014-0.036-0.037l-0.037-0.036v-0.037H9.688v-0.036c-0.024-0.024-0.047-0.036-0.072-0.036v-0.037H9.578v-0.036 c-0.023,0-0.037-0.013-0.037-0.037V12.25c-0.023,0-0.036-0.013-0.036-0.037L9.47,12.178v-0.036H9.432l-0.11-0.146v-0.036 c-0.023,0-0.035-0.013-0.035-0.036H9.25v17.782l-0.146,0.036c-0.048,0.024-0.097,0.061-0.145,0.109H8.923 c-0.583,0.315-1.13,0.534-1.64,0.655c-0.608,0.194-1.189,0.316-1.75,0.364c-0.51,0.099-1.008,0.121-1.493,0.073 c-0.461-0.049-0.875-0.109-1.239-0.182C2,30.591,1.38,30.385,0.943,30.142c-0.219-0.097-0.389-0.182-0.51-0.254 c-0.17-0.074-0.255-0.122-0.255-0.146l-0.109-0.036V11.887c-0.097-0.195-0.061-0.402,0.109-0.621 c0-0.023,0.013-0.048,0.036-0.072c0.074-0.023,0.147-0.036,0.219-0.036v-0.036c0.122-0.05,0.279-0.086,0.473-0.109 c0.194-0.025,0.474-0.05,0.839-0.073c0.193-0.048,0.4-0.085,0.62-0.109c0.17-0.024,0.291-0.036,0.363-0.036 c-0.024-0.219-0.024-0.389,0-0.51c0.048-0.073,0.086-0.134,0.11-0.183l0.109-0.146V8.351H2.91c-0.121,0-0.255-0.011-0.401-0.035 c-0.17,0-0.34,0-0.51,0V7.805h0.036V7.768c0.024,0,0.048,0,0.073,0c-0.048-0.072-0.048-0.182,0-0.327 c0-0.073,0.048-0.194,0.146-0.365c0.072-0.169,0.195-0.267,0.365-0.291h4.3L7.1,6.856v0.147c0.146-0.293,0.328-0.547,0.547-0.766 V6.202c0-0.025,0-0.049,0-0.073c0.025,0,0.06,0,0.11,0c0-0.025,0.011-0.036,0.036-0.036v0.036c0.121,0,0.243,0,0.364,0V6.53 l0.037,0.036v0.036c0.047,0,0.109,0,0.182,0v0.036l0.037,0.036V6.784z M8.887,24.858c0-0.025,0-0.062,0-0.109v-0.11 c-1.967,0.293-3.341,0.438-4.118,0.438c-0.802,0-2.234-0.145-4.3-0.438c0,0.025,0,0.05,0,0.073c0,0.025,0,0.049,0,0.074v0.51 c0,0.024,0,0.049,0,0.072c0,0.024,0,0.049,0,0.072v0.073c0,0.025,0,0.049,0,0.072c0,0.025,0,0.05,0,0.074s0,0.049,0,0.072v0.072 c0,0.025,0,0.05,0,0.074s0,0.049,0,0.072v0.037c2.09,0.364,3.546,0.546,4.373,0.546c0.873,0,2.224-0.17,4.045-0.511v-0.4 c0-0.023,0-0.048,0-0.072v-0.037c0-0.048,0-0.084,0-0.109c0-0.023,0-0.048,0-0.073v-0.035c0-0.025,0-0.049,0-0.073 s0-0.061,0-0.109v-0.037c0-0.024,0-0.049,0-0.072c0-0.024,0-0.049,0-0.072C8.887,24.907,8.887,24.882,8.887,24.858z"/></svg>')),
	},
	{
		1,
		14,
		draw.CreateTexture(common.RasterizeSVG('<svg xmlns="http://www.w3.org/2000/svg" width="19.438" height="32"><path fill-rule="evenodd" clip-rule="evenodd" fill="#FFF" d="M14.917,11.512c0,0.024,0,0.049,0,0.072 c0.022,0.023,0.034,0.048,0.034,0.072c0,0.023,0.012,0.047,0.036,0.072v0.035c0.025,0.023,0.037,0.048,0.037,0.072 c0.024,0.023,0.047,0.047,0.071,0.071v0.036c0,0.024,0.013,0.035,0.036,0.035c0,0.024,0,0.048,0,0.072 c0.025,0.023,0.036,0.048,0.036,0.072s0.012,0.048,0.037,0.073l0.035,0.035c0,0.024,0,0.047,0,0.071 c0.025,0.023,0.037,0.048,0.037,0.071l0.036,0.037v0.035c0,0.023,0,0.049,0,0.073c0.024,0.024,0.048,0.046,0.072,0.071 c0,0.024,0.011,0.047,0.034,0.073l0.036,0.036c0,0.023,0,0.047,0,0.071c0.024,0.023,0.037,0.048,0.037,0.072v0.036 c0.023,0,0.035,0.011,0.035,0.035c0,0.022,0,0.048,0,0.071c0.025,0.023,0.036,0.048,0.036,0.072 c0.024,0.023,0.036,0.047,0.036,0.072c0.023,0,0.036,0.013,0.036,0.036c0.023,0.023,0.037,0.047,0.037,0.072 c0.023,0.024,0.034,0.047,0.034,0.071c0.025,0,0.048,0,0.071,0c0,0.024,0.024,0.037,0.073,0.037 c0.024,0.022,0.047,0.046,0.071,0.07c0.023,0.024,0.037,0.047,0.037,0.072c0.022,0.024,0.035,0.048,0.035,0.071v0.073 c0.023,0.022,0.036,0.046,0.036,0.069c0,0.026,0.013,0.048,0.036,0.071v0.038c0,0.023,0.011,0.046,0.036,0.07 c0,0.024,0,0.047,0,0.073c0.024,0.024,0.036,0.047,0.036,0.071c0.024,0,0.037,0.012,0.037,0.035v0.037 c0.024,0.023,0.036,0.046,0.036,0.071c0,0.024,0,0.048,0,0.073l0.035,0.036c0,0.023,0.011,0.045,0.037,0.07 c0,0.024,0.012,0.049,0.036,0.072c0,0.023,0,0.047,0,0.072c0.025,0,0.036,0.011,0.036,0.036l0.035,0.037 c0.025,0.023,0.036,0.046,0.036,0.071c0.024,0.026,0.036,0.048,0.036,0.071v0.037c0.023,0.023,0.036,0.047,0.036,0.071 c0.023,0.025,0.037,0.049,0.037,0.072l0.034,0.035c0.025,0.024,0.036,0.047,0.036,0.07l0.037,0.038c0,0.023,0,0.046,0,0.072 c0.023,0.023,0.034,0.047,0.034,0.071l0.037,0.036c0,0.022,0.012,0.047,0.036,0.072c0,0.023,0.011,0.049,0.034,0.071v0.036 c0.026,0.024,0.038,0.047,0.038,0.072l0.034,0.036c0.025,0.023,0.037,0.047,0.037,0.071c0,0.024,0.012,0.036,0.035,0.036 c0,0.023,0,0.048,0,0.072c0.024,0.024,0.036,0.047,0.036,0.072c0.024,0.023,0.036,0.048,0.036,0.072l0.037,0.035 c0.023,0.024,0.036,0.049,0.036,0.072l0.035,0.036c0,0.024,0,0.047,0,0.072l0.035,0.035c0,0.026,0,0.048,0,0.071 c0,0.024,0.013,0.049,0.037,0.072c0,0.024,0,0.049,0,0.073c0.023,0,0.036,0.011,0.036,0.034c0.024,0.023,0.035,0.048,0.035,0.073 v0.035c0.025,0.024,0.049,0.047,0.072,0.072l0.037,0.037c0,0.023,0,0.047,0,0.071c0,0.024,0.012,0.048,0.035,0.071 c0,0.024,0,0.049,0,0.072c0.024,0,0.037,0.012,0.037,0.035c0,0.025,0,0.049,0,0.073l0.035,0.037c0,0.023,0,0.046,0,0.069 l0.036,0.039c0,0.022,0.012,0.045,0.035,0.069c0,0.023,0.013,0.047,0.037,0.071v0.037c0,0.025,0,0.047,0,0.072 c0.023,0.023,0.036,0.048,0.036,0.071l0.037,0.037c0.023,0.022,0.046,0.047,0.072,0.07v0.037 c0.024,0.024,0.035,0.048,0.035,0.072c0,0.023,0,0.047,0,0.071l0.036,0.036c0.024,0.023,0.036,0.049,0.036,0.071 c0,0.024,0,0.049,0,0.074l0.037,0.035v0.035c0.024,0.024,0.047,0.048,0.071,0.073c0,0.023,0.012,0.047,0.036,0.07 c0,0.024,0.012,0.049,0.035,0.074c0,0.022,0.013,0.036,0.036,0.036c0,0.023,0,0.047,0,0.07c0,0.025,0,0.048,0,0.073l0.071,0.072 c0.025,0.023,0.048,0.047,0.072,0.07c0,0.024,0,0.049,0,0.072c0.024,0.023,0.048,0.049,0.072,0.074v0.034 c0.023,0.024,0.035,0.048,0.035,0.073c0.025,0.023,0.037,0.048,0.037,0.071v0.036c0.023,0.024,0.047,0.037,0.072,0.037 c0,0.024,0.012,0.048,0.036,0.072c0,0.023,0.012,0.047,0.036,0.071c0,0.024,0.011,0.048,0.036,0.071v0.035 c0,0.025,0,0.049,0,0.073c0.023,0.023,0.034,0.047,0.034,0.071l0.037,0.037c0.024,0,0.047,0.011,0.072,0.036 c0,0.024,0,0.049,0,0.071c0.023,0.025,0.035,0.048,0.035,0.072l0.036,0.035v0.037c0,0.024,0,0.047,0,0.071v0.037 c0.025,0,0.049,0.011,0.073,0.034c0,0.025,0.011,0.05,0.034,0.072c0.024,0,0.036,0.011,0.036,0.035 c0,0.023,0.013,0.048,0.036,0.071v0.037c0,0.024,0,0.047,0,0.071v0.037c0,0.023,0,0.047,0,0.07s0,0.049,0,0.072 c0,0.025,0,0.049,0,0.073c-0.023,0-0.036,0.011-0.036,0.034c0,0.025,0,0.048,0,0.072l-0.036,0.036c0,0.143,0,0.286,0,0.43 c0,0.167,0,0.333,0,0.5c0,0.167,0,0.334,0,0.501c0,0.192,0,0.37,0,0.538c0,0.189,0,0.37,0,0.537c0,0.192,0,0.357,0,0.501 c0,0.12,0,0.227,0,0.324c0,0.023,0,0.046,0,0.07v0.144c0,0.022,0,0.047,0,0.071v0.106c0,0.024,0,0.049,0,0.074 c0,0.023,0,0.047,0,0.071v0.036c0,0.023,0,0.046,0,0.071v0.036c0,0.024,0,0.048,0,0.071c0,0.024,0,0.048,0,0.071l0.036,0.037 c0,0.025,0,0.048,0,0.071c0,0.025,0.013,0.048,0.036,0.071v0.037c0,0.024,0,0.048,0,0.072v0.035c0,0.023,0,0.047,0,0.071v0.037 c0,0.023,0,0.047,0,0.07c0,0.025,0,0.048,0,0.073c0,0.024,0,0.047,0,0.07v0.037c0,0.023,0,0.047,0,0.072v0.036 c0,0.024,0,0.048,0,0.072v0.037c0,0.022,0,0.045,0,0.07s0,0.048,0,0.072s0,0.047,0,0.071v0.037c0,0.023,0,0.048,0,0.071 l0.036,0.036c0,0.024,0,0.046,0,0.07l0.036,0.038c0,0.023,0,0.047,0,0.071c0,0.023,0,0.046,0,0.071s0,0.048,0,0.07v0.038 c0,0.024,0,0.047,0,0.071v0.037c0,0.023,0,0.047,0,0.071v0.037c0,0.024,0,0.046,0,0.071s0,0.049,0,0.071v0.036 c0,0.024,0,0.049,0,0.072c0,0.023,0,0.048,0,0.071v0.036c0,0.024,0,0.048,0,0.073v0.037c0,0.023,0,0.047,0,0.07 c0,0.024,0,0.049,0,0.073v0.036c0,0.024,0,0.047,0,0.071c0,0.023,0,0.048,0,0.072v0.071c0,0.023,0,0.048,0,0.071 c0,0.024,0,0.047,0,0.072c0,0.025,0,0.049,0,0.072l0.035,0.036c0,0.023,0.012,0.048,0.036,0.072c0,0.023,0,0.048,0,0.072v0.07 c0,0.024,0,0.049,0,0.072c0,0.024,0,0.047,0,0.072c0,0.023,0,0.047,0,0.071v0.035c0,0.024,0,0.049,0,0.072 c0,0.024,0,0.047,0,0.072v0.071c0,0.024,0,0.047,0,0.072s0,0.049,0,0.071c0,0.025,0,0.05,0,0.074v0.035c0,0.023,0,0.048,0,0.071 c0,0.024,0,0.048,0,0.073v0.071c0,0.024,0,0.047,0,0.07c0,0.024,0,0.048,0,0.071c0,0.025,0,0.049,0,0.074 c-0.024,0-0.036,0.011-0.036,0.035c0,0.024,0,0.049,0,0.072c-0.024,0.022-0.035,0.046-0.035,0.072v0.071c0,0.024,0,0.048,0,0.072 c0,0.024,0,0.047,0,0.071v0.037c0,0.022,0,0.046,0,0.07c0,0.023,0,0.048,0,0.072c0,0.023,0,0.048,0,0.071v0.073 c0,0.022,0,0.046,0,0.071c0,0.023,0,0.048,0,0.072v0.034c0,0.026,0,0.05,0,0.073c0,0.023,0,0.046,0,0.073c0,0.022,0,0.046,0,0.07 c0,0.024,0,0.049,0,0.072c0,0.024,0,0.049,0,0.073c0,0.022,0,0.047,0,0.071v0.035c0,0.025,0,0.048,0,0.071 c0,0.024,0,0.049,0,0.073c0,0.024,0,0.048,0,0.072c0,0.025-0.013,0.048-0.036,0.071c0,0.024,0,0.049,0,0.072 s-0.013,0.047-0.036,0.072l-0.036,0.036c0,0.024-0.012,0.047-0.036,0.07c-0.023,0.024-0.034,0.048-0.034,0.072 c-0.024,0.025-0.037,0.048-0.037,0.072h-0.037c0,0.024-0.011,0.048-0.036,0.072H18.64c-0.072,0.025-0.12,0.048-0.143,0.071 c-0.048,0-0.095,0.012-0.144,0.035c-0.072,0-0.155,0-0.251,0c-0.048-0.023-0.094-0.035-0.142-0.035 c-0.024-0.023-0.06-0.046-0.107-0.071c0-0.024-0.013-0.048-0.037-0.072v-0.035c0-0.024,0-0.048,0-0.072c0-0.025,0-0.048,0-0.071 c0-0.023,0-0.048,0-0.072v-0.037l0.037-0.035c0.024-0.023,0.047-0.048,0.071-0.072c0.024-0.023,0.048-0.046,0.071-0.071 c0.048,0,0.096,0,0.143,0c0.024-0.023,0.048-0.047,0.071-0.072c0-0.073,0-0.131,0-0.178c0-0.167,0-0.348,0-0.537 c0-0.167,0-0.347,0-0.538c0-0.166,0-0.335,0-0.501c0-0.168,0-0.334,0-0.501c0-0.192,0-0.37,0-0.537c0-0.192,0-0.371,0-0.537 s0-0.335,0-0.502c0-0.167,0-0.346,0-0.536c0-0.168,0-0.347,0-0.536c0-0.145,0-0.312,0-0.503c0-0.048,0-0.106,0-0.179v-0.144 c0-0.023,0-0.048,0-0.072v-0.036c0-0.024,0-0.046,0-0.071v-0.072c0-0.025,0-0.048,0-0.071v-0.145c0-0.023,0-0.047,0-0.07v-0.109 c-0.022-0.023-0.035-0.046-0.035-0.071c-0.024-0.024-0.047-0.037-0.072-0.037c0-0.023,0-0.047,0-0.071v-0.035 c0-0.023,0-0.047,0-0.073c0-0.024,0-0.046,0-0.071v-0.036c0-0.023,0-0.048,0-0.073c0-0.023,0-0.046,0-0.07v-0.037 c0-0.023,0-0.047,0-0.071v-0.037c0-0.023,0-0.048,0-0.072v-0.036c0-0.023,0-0.047,0-0.07c0-0.023,0-0.047,0-0.072 c0-0.023,0-0.048,0-0.071v-0.037c-0.023-0.024-0.035-0.046-0.035-0.071v-0.037c-0.024-0.023-0.036-0.047-0.036-0.072v-0.036 c0-0.023,0-0.047,0-0.07c0-0.024,0-0.049,0-0.074c0-0.024,0-0.046,0-0.07v-0.035c0-0.024,0-0.048,0-0.072v-0.036 c0-0.024,0-0.048,0-0.071v-0.037c0-0.022,0-0.047,0-0.07c0-0.026,0-0.05,0-0.073c0-0.023,0-0.047,0-0.071v-0.037 c0-0.023,0-0.047,0-0.071V21.79c0-0.024,0-0.048,0-0.072v-0.036c0-0.023,0-0.045,0-0.07s0-0.048,0-0.072 c-0.023-0.024-0.048-0.047-0.071-0.071v-0.037c0-0.023,0-0.047,0-0.071v-0.037c0-0.023,0-0.046,0-0.071v-0.036 c0-0.023,0-0.049,0-0.073c0-0.023,0-0.047,0-0.071v-0.036c-0.024-0.022-0.036-0.047-0.036-0.07 c-0.024-0.024-0.035-0.049-0.035-0.072v-0.072c0-0.024,0-0.048,0-0.073c0-0.023,0-0.046,0-0.071s0-0.048,0-0.072l-0.036-0.035 c-0.024-0.024-0.037-0.049-0.037-0.072c0-0.023,0-0.048,0-0.071v-0.072c0-0.022,0-0.049,0-0.071 c-0.024-0.024-0.036-0.047-0.036-0.072s0-0.049,0-0.071c-0.024,0-0.036-0.013-0.036-0.036c0-0.025-0.011-0.048-0.035-0.073 c0-0.023,0-0.048,0-0.071c-0.025,0-0.048-0.012-0.072-0.036v-0.037c0-0.023,0-0.047,0-0.071c0-0.024,0-0.048,0-0.072 c0-0.023,0-0.047,0-0.071v-0.035c0-0.026,0-0.049,0-0.071c0-0.026,0-0.049,0-0.073c-0.025,0-0.037-0.011-0.037-0.036 c-0.024,0-0.036-0.012-0.036-0.037c0-0.023-0.012-0.047-0.037-0.07c0-0.024-0.011-0.047-0.035-0.072c0-0.023,0-0.048,0-0.071 c-0.023,0-0.036-0.012-0.036-0.037c0-0.023-0.011-0.048-0.035-0.071c-0.024-0.024-0.037-0.048-0.037-0.073 c-0.023,0-0.035-0.011-0.035-0.035v-0.035c-0.024-0.024-0.037-0.047-0.037-0.071c-0.023-0.024-0.047-0.049-0.072-0.072 c0-0.024-0.011-0.036-0.035-0.036c0-0.025-0.013-0.048-0.036-0.072c0-0.023,0-0.047,0-0.071 c-0.024-0.025-0.037-0.049-0.037-0.073v-0.034L17.1,18.495c0-0.024-0.011-0.047-0.035-0.071c0-0.024-0.013-0.049-0.036-0.07 c0-0.027-0.013-0.037-0.037-0.037c0-0.025,0-0.049,0-0.072c-0.023-0.024-0.036-0.048-0.036-0.073 c-0.024-0.023-0.036-0.047-0.036-0.07h-0.035c0-0.025,0-0.048,0-0.073s-0.011-0.047-0.037-0.071c0-0.024,0-0.047,0-0.073 c-0.023-0.023-0.045-0.035-0.072-0.035c0-0.023-0.011-0.048-0.034-0.07c-0.024,0-0.048,0-0.073,0 c-0.023-0.025-0.058-0.049-0.107-0.074c-0.024-0.022-0.034-0.047-0.034-0.071c-0.025,0-0.049-0.011-0.073-0.036 c0-0.023,0-0.048,0-0.071c-0.024-0.024-0.036-0.047-0.036-0.072l-0.036-0.037c0-0.023,0-0.048,0-0.07 c-0.023,0-0.046-0.014-0.071-0.037c-0.024-0.023-0.048-0.047-0.073-0.071c0-0.025-0.012-0.047-0.035-0.072v-0.037 c0-0.023-0.012-0.048-0.036-0.071c0-0.024-0.012-0.047-0.037-0.069c0-0.027-0.012-0.039-0.036-0.039c0-0.023,0-0.046,0-0.069 c-0.025,0-0.036-0.012-0.036-0.037c-0.023-0.023-0.048-0.048-0.071-0.073V16.74c0-0.023-0.013-0.048-0.035-0.072 c0-0.023,0-0.046,0-0.071c-0.024-0.024-0.048-0.047-0.072-0.071l-0.036-0.037c-0.024-0.025-0.049-0.048-0.073-0.072v-0.035 c0-0.024,0-0.049,0-0.073v-0.034c-0.023-0.024-0.046-0.048-0.071-0.073c-0.023-0.023-0.048-0.048-0.071-0.072 c0-0.023-0.013-0.045-0.036-0.071l-0.036-0.035c-0.023-0.024-0.036-0.048-0.036-0.072l-0.035-0.036c0-0.023,0-0.047,0-0.072 c-0.024,0-0.037-0.013-0.037-0.035c-0.024-0.024-0.047-0.049-0.07-0.072c0-0.024-0.013-0.047-0.036-0.072 c-0.025-0.023-0.036-0.048-0.036-0.072l-0.036-0.036c-0.024-0.023-0.037-0.047-0.037-0.071c-0.023,0-0.047-0.011-0.072-0.036 c0-0.024,0-0.048,0-0.072c-0.024,0-0.036-0.012-0.036-0.036c-0.023-0.022-0.036-0.048-0.036-0.071 c-0.023-0.025-0.047-0.049-0.071-0.072c0-0.024-0.012-0.036-0.037-0.036c0-0.023-0.012-0.048-0.036-0.071 c-0.023-0.026-0.047-0.049-0.071-0.072l-0.036-0.038c-0.023-0.023-0.047-0.046-0.072-0.07l-0.033-0.035 c0-0.022-0.013-0.046-0.038-0.072c0-0.024,0-0.048,0-0.071c-0.023-0.023-0.047-0.037-0.071-0.037 c0-0.023-0.012-0.045-0.036-0.071c-0.024-0.024-0.037-0.048-0.037-0.071c-0.023,0-0.036-0.012-0.036-0.037 c-0.023-0.025-0.048-0.036-0.07-0.036c-0.025-0.024-0.036-0.048-0.036-0.072c0-0.023-0.013-0.048-0.036-0.072 c-0.908,0-1.827,0.013-2.758,0.036c0,0.024-0.012,0.036-0.036,0.036c0,0.023-0.011,0.047-0.035,0.072v0.036 c0,0.024,0,0.049,0,0.072s0,0.047,0,0.072v0.035c0,0.024,0,0.048,0,0.073c0,0.023,0,0.048,0,0.071v0.071c0,0.024,0,0.047,0,0.07 c0,0.026,0,0.049,0,0.073c0,0.023,0,0.048,0,0.071v0.037c0,0.023,0,0.047,0,0.072c0,0.023,0,0.048,0,0.071v0.072 c0,0.024,0,0.047,0,0.072c0,0.025,0,0.048,0,0.071c0,0.024,0,0.049,0,0.072v0.036c0,0.023,0,0.047,0,0.072 c0,0.023,0,0.048,0,0.073v0.07c0,0.024,0,0.049,0,0.072c0,0.023,0,0.048,0,0.072c0,0.023,0,0.046,0,0.071v0.036 c0,0.024,0,0.049,0,0.072c0,0.025,0,0.048,0,0.072v0.07c0,0.023,0,0.048,0,0.073c0,0.023,0,0.046,0,0.071v0.036 c0,0.023,0,0.047,0,0.072c0.024,0,0.047,0,0.071,0c0.024,0,0.047,0,0.072,0c0.071,0,0.144,0.011,0.214,0.035 c0,0.024,0.012,0.037,0.037,0.037c0.094,0.022,0.166,0.034,0.215,0.034c0.047,0,0.095,0.013,0.143,0.037c0.025,0,0.048,0,0.072,0 c0.143,0.023,0.299,0.035,0.465,0.035c0.072,0,0.131,0,0.18,0c0.022,0.024,0.047,0.035,0.071,0.035 c0.024,0.025,0.047,0.038,0.071,0.038c0.048,0,0.085,0.012,0.108,0.035h0.037c0.095,0.024,0.178,0.037,0.25,0.037 c0.07,0,0.131,0.011,0.179,0.036c0.023,0.023,0.048,0.034,0.071,0.034c0.024,0,0.048,0,0.072,0c0.048,0,0.083,0.012,0.107,0.039 c0.025,0,0.049,0,0.072,0c0.047,0.022,0.097,0.032,0.143,0.032c0.048,0,0.109,0.013,0.18,0.037 c0.023,0.023,0.047,0.047,0.072,0.071c0.047,0.024,0.083,0.037,0.106,0.037h0.073c0.071,0,0.141,0.012,0.213,0.037 c0.025,0.022,0.049,0.047,0.073,0.071c0.022,0.024,0.058,0.048,0.107,0.072c0.047,0.022,0.095,0.047,0.143,0.07 c0.024,0,0.061,0.012,0.108,0.037c0.023,0.024,0.06,0.036,0.108,0.036c0.046,0.024,0.094,0.048,0.142,0.07 c0,0.025,0.025,0.049,0.072,0.072l0.036,0.037c0.023,0.023,0.048,0.047,0.071,0.071c0.025,0.023,0.048,0.047,0.071,0.072v0.035 c0.049,0.024,0.084,0.048,0.109,0.073c0.024,0.023,0.058,0.035,0.107,0.035c0,0.024,0.023,0.047,0.071,0.071 c0,0.024,0.011,0.048,0.036,0.073c0.024,0,0.048,0.013,0.072,0.036s0.036,0.045,0.036,0.07c0.023,0.026,0.046,0.049,0.071,0.073 c0.024,0.023,0.048,0.036,0.072,0.036c0.023,0.023,0.047,0.047,0.071,0.07l0.036,0.037c0.023,0.024,0.047,0.047,0.073,0.071 c0,0.023,0.01,0.038,0.034,0.038c0,0.023,0.013,0.047,0.036,0.07c0.024,0.024,0.037,0.047,0.037,0.072 c0.023,0.023,0.034,0.048,0.034,0.071l0.037,0.037c0.024,0.024,0.036,0.048,0.036,0.072l0.034,0.036c0,0.024,0,0.047,0,0.071 l0.038,0.035c0,0.024,0,0.047,0,0.071c0.022,0.023,0.034,0.048,0.034,0.071c0.025,0.024,0.037,0.049,0.037,0.073v0.036 c0.023,0.024,0.035,0.049,0.035,0.071v0.037c0.024,0.023,0.049,0.047,0.072,0.07v0.037c0,0.024,0.012,0.047,0.037,0.071 c0,0.023,0,0.048,0,0.071c0,0.025,0,0.05,0,0.072c0.023,0,0.036,0.011,0.036,0.035c0.024,0.023,0.035,0.048,0.035,0.071v0.037 c0.024,0.024,0.035,0.047,0.035,0.071v0.037c0,0.023,0,0.047,0,0.07s0.013,0.049,0.037,0.072c0,0.025,0,0.049,0,0.073v0.034 c0.023,0.025,0.036,0.048,0.036,0.072l0.035,0.036c0,0.022,0,0.048,0,0.071c0.025,0,0.036,0.012,0.036,0.036s0,0.047,0,0.07 c0,0.025,0.013,0.049,0.036,0.073v0.036c0,0.023,0.012,0.048,0.037,0.072c0,0.023,0,0.047,0,0.072v0.034 c0,0.025,0.012,0.048,0.035,0.073v0.036c0.024,0.023,0.037,0.048,0.037,0.071c0.024,0.024,0.035,0.048,0.035,0.072l0.036,0.035 c0.024,0.024,0.035,0.048,0.035,0.072c0.025,0.024,0.037,0.049,0.037,0.072v0.072c0,0.024,0.012,0.048,0.036,0.071 c0,0.025,0,0.049,0,0.072s0.011,0.049,0.037,0.073v0.035c0.023,0.024,0.035,0.048,0.035,0.072 c0.024,0.024,0.037,0.049,0.037,0.073v0.034l0.035,0.036c0,0.024,0,0.048,0,0.072s0,0.047,0,0.071c0,0.023,0,0.049,0,0.072v0.035 c0,0.025,0,0.049,0,0.072c0.023,0.025,0.036,0.048,0.036,0.072v0.035l0.036,0.037c0,0.023,0,0.046,0,0.071 c0,0.023,0,0.049,0,0.072c0,0.022,0,0.049,0,0.071v0.036c0,0.024,0,0.047,0,0.071c0,0.024,0,0.048,0,0.071v0.072 c0,0.025,0,0.049,0,0.072c0,0.025,0,0.047,0,0.072v0.036c0,0.024,0,0.049,0,0.072c0,0.024,0,0.047,0,0.072 c0,0.023,0,0.045,0,0.07v0.072c0,0.024,0,0.049,0,0.072c0,0.024,0,0.048,0,0.072v0.036c0,0.024,0,0.047,0,0.072 c0,0.023,0,0.048,0,0.072c0,0.024,0,0.047,0,0.071s0,0.047,0,0.071c0,0.025,0,0.049,0,0.073s0,0.047,0,0.07v0.036 c0,0.024,0,0.048,0,0.073c0,0.022,0,0.047,0,0.071c-0.024,0.025-0.036,0.047-0.036,0.072c-0.024,0.023-0.036,0.046-0.036,0.07 c0,0.025,0,0.048,0,0.073c0,0.023,0,0.047,0,0.072v0.035c0,0.023,0,0.048,0,0.072s0,0.048,0,0.071c0,0.024,0,0.048,0,0.071 c0,0.024-0.011,0.049-0.035,0.072c0,0.023,0,0.047,0,0.071c0,0.024-0.013,0.046-0.037,0.072l-0.035,0.035 c0,0.023,0,0.049,0,0.072s0,0.047,0,0.071l-0.037,0.037v0.035c-0.024,0.023-0.036,0.048-0.036,0.072c0,0.022,0,0.047,0,0.072 c0,0.023,0,0.046,0,0.07v0.036c-0.024,0.023-0.037,0.049-0.037,0.072c-0.023,0.024-0.035,0.048-0.035,0.072l-0.036,0.037v0.034 c-0.023,0.024-0.035,0.048-0.035,0.072s0,0.048,0,0.072c0,0.023-0.012,0.035-0.037,0.035c0,0.023,0,0.049,0,0.073 c-0.023,0.023-0.035,0.047-0.035,0.071c0,0.024,0,0.046,0,0.07l-0.072,0.073c0,0.023-0.011,0.048-0.036,0.072 c0,0.023,0,0.048,0,0.071c0,0.024-0.011,0.035-0.035,0.035c0,0.025-0.013,0.049-0.036,0.074c0,0.023-0.012,0.048-0.037,0.072 c0,0.023,0,0.047,0,0.071L17.1,26.267v0.035c-0.022,0.024-0.048,0.048-0.071,0.073c0,0.023,0,0.046,0,0.07 c-0.024,0-0.037,0.013-0.037,0.036c0,0.025,0,0.047,0,0.072c-0.023,0.023-0.036,0.046-0.036,0.07 c0,0.024-0.012,0.048-0.036,0.073v0.037l-0.035,0.035c0,0.023-0.011,0.049-0.037,0.072c0,0.023,0,0.046,0,0.071l-0.034,0.036 c0,0.022-0.011,0.048-0.038,0.072c0,0.023,0,0.046,0,0.07l-0.034,0.036c-0.024,0.023-0.036,0.048-0.036,0.071l-0.037,0.037 c0,0.023-0.011,0.047-0.034,0.072c0,0.023,0,0.047,0,0.072l-0.037,0.036c0,0.022-0.011,0.048-0.036,0.072 c0,0.023-0.012,0.046-0.034,0.07c0,0.023-0.014,0.036-0.037,0.036c-0.024,0.024-0.036,0.049-0.036,0.072 c0,0.024-0.012,0.037-0.036,0.037c0,0.022-0.011,0.046-0.036,0.07c0,0.024-0.011,0.037-0.035,0.037 c0,0.023-0.011,0.047-0.036,0.07c0,0.024-0.012,0.049-0.036,0.072c-0.025,0.024-0.048,0.048-0.071,0.072v0.036 c-0.024,0.024-0.036,0.047-0.036,0.072c-0.024,0.024-0.048,0.036-0.072,0.036c0,0.023-0.012,0.048-0.036,0.071 c0,0.025-0.012,0.038-0.036,0.038c0,0.022-0.012,0.046-0.036,0.07c0,0.024,0,0.048,0,0.071c-0.024,0.025-0.049,0.049-0.072,0.073 c-0.023,0-0.047,0.011-0.071,0.036c-0.024,0.024-0.049,0.047-0.073,0.07v0.035c-0.023,0.024-0.046,0.048-0.071,0.073 c0,0.025-0.011,0.037-0.034,0.037c0,0.023-0.014,0.047-0.037,0.07c0,0.024-0.013,0.047-0.036,0.072 c-0.023,0.024-0.047,0.048-0.072,0.071l-0.035,0.037c-0.024,0.024-0.037,0.048-0.037,0.072c-0.047,0.024-0.083,0.035-0.106,0.035 c-0.025,0.025-0.036,0.048-0.036,0.073l-0.036,0.034c-0.048,0.024-0.084,0.047-0.108,0.071c-0.048,0.025-0.083,0.048-0.107,0.073 c-0.024,0.024-0.047,0.048-0.072,0.071c-0.024,0-0.048,0.011-0.07,0.037c-0.024,0.022-0.037,0.046-0.037,0.071 c-0.024,0.023-0.047,0.035-0.071,0.035c-0.047,0.024-0.096,0.048-0.144,0.071c-0.024,0-0.059,0.013-0.108,0.037 c-0.048,0.024-0.084,0.047-0.106,0.072c-0.025,0.024-0.049,0.047-0.072,0.072s-0.047,0.035-0.071,0.035 c-0.049,0.024-0.085,0.049-0.109,0.072c-0.046,0.024-0.096,0.049-0.143,0.073c-0.047,0.022-0.083,0.035-0.107,0.035 c0,0.024-0.012,0.047-0.035,0.071l-0.037,0.036c-0.047,0.024-0.083,0.048-0.106,0.072c-0.024,0.025-0.049,0.036-0.073,0.036 c-0.048,0.024-0.095,0.037-0.143,0.037c-0.024,0.023-0.048,0.035-0.072,0.035c-0.05,0-0.083,0.012-0.107,0.036 c-0.071,0.024-0.119,0.049-0.144,0.072c-0.048,0.024-0.084,0.036-0.108,0.036c-0.047,0.023-0.084,0.035-0.106,0.035 c-0.073,0-0.132,0.012-0.18,0.037c-0.024,0-0.047,0-0.072,0c-0.046,0.023-0.094,0.036-0.141,0.036 c-0.051,0.024-0.098,0.036-0.146,0.036c-0.046,0.023-0.083,0.046-0.106,0.071c-0.047,0.024-0.095,0.047-0.144,0.072l-0.071,0.035 c-0.073,0-0.143,0-0.215,0c-0.025,0.024-0.037,0.048-0.037,0.072c-0.024,0-0.046,0-0.07,0c-0.047,0.025-0.096,0.037-0.144,0.037 c-0.025,0-0.06,0.011-0.108,0.034c-0.024,0-0.047,0-0.071,0c-0.024,0.024-0.06,0.035-0.107,0.035 c-0.095,0-0.179,0.013-0.25,0.037c-0.048,0-0.084,0-0.107,0c-0.024,0.025-0.061,0.036-0.107,0.036 c-0.048,0-0.096,0.012-0.144,0.037h-0.037c-0.046,0.023-0.093,0.035-0.141,0.035c-0.048,0-0.109,0.012-0.18,0.035 c-0.048,0.023-0.083,0.037-0.107,0.037c-0.024,0.023-0.06,0.034-0.108,0.034c-0.119,0-0.225,0-0.322,0 c-0.048,0.024-0.095,0.047-0.143,0.072c-0.048,0.024-0.084,0.037-0.108,0.037c-0.023,0.024-0.06,0.037-0.107,0.037 c-0.072,0-0.155,0.012-0.25,0.036H9.258c-0.023,0.023-0.06,0.036-0.108,0.036c-0.548,0-1.087,0-1.611,0 c-0.049,0-0.096-0.013-0.144-0.036H7.361c-0.024-0.024-0.049-0.036-0.073-0.036c-0.072-0.024-0.131-0.037-0.18-0.037 c-0.046-0.024-0.095-0.047-0.143-0.072c0-0.024-0.012-0.037-0.036-0.037H6.895c-0.049-0.022-0.107-0.034-0.18-0.034 c-0.024-0.024-0.06-0.048-0.106-0.072l-0.037-0.035c-0.047-0.024-0.084-0.037-0.107-0.037c-0.072-0.023-0.144-0.036-0.216-0.036 l-0.071-0.037H6.142c-0.073-0.023-0.13-0.035-0.178-0.035c-0.049-0.023-0.097-0.046-0.144-0.071 c-0.048-0.024-0.095-0.048-0.143-0.072H5.569c-0.072-0.024-0.143-0.047-0.214-0.072c-0.023-0.024-0.049-0.048-0.071-0.072H5.248 C5.176,30.611,5.127,30.6,5.104,30.6c-0.072-0.023-0.144-0.048-0.214-0.072c-0.025,0-0.051-0.012-0.073-0.037H4.781 c-0.072-0.023-0.119-0.035-0.143-0.035c-0.048-0.023-0.107-0.048-0.179-0.072c-0.023-0.023-0.06-0.046-0.108-0.071 c-0.047,0-0.094-0.012-0.142-0.035c-0.048-0.024-0.108-0.048-0.181-0.073c-0.023-0.024-0.033-0.048-0.033-0.072 c-0.049-0.023-0.097-0.036-0.145-0.036c-0.024-0.023-0.048-0.046-0.072-0.071c-0.024,0-0.048-0.013-0.072-0.035 c-0.022-0.024-0.046-0.048-0.07-0.073c-0.048-0.023-0.072-0.047-0.072-0.072c-0.024,0-0.048-0.011-0.072-0.035 c-0.023-0.024-0.048-0.047-0.072-0.072c-0.022-0.025-0.045-0.048-0.071-0.072c-0.025-0.023-0.059-0.037-0.107-0.037 c-0.024-0.023-0.06-0.046-0.106-0.071c-0.024,0-0.037-0.012-0.037-0.035c-0.024-0.024-0.048-0.049-0.071-0.071 c-0.024-0.026-0.049-0.037-0.073-0.037c0-0.023-0.012-0.047-0.035-0.071c-0.024-0.025-0.037-0.048-0.037-0.073 c-0.024-0.024-0.047-0.047-0.071-0.071c-0.023-0.023-0.047-0.034-0.071-0.034c-0.024-0.025-0.048-0.048-0.071-0.073 c-0.023,0-0.037-0.011-0.037-0.035c-0.047-0.023-0.095-0.048-0.143-0.072c0-0.024-0.012-0.037-0.034-0.037 c-0.024-0.023-0.038-0.047-0.038-0.071c-0.024-0.025-0.047-0.048-0.072-0.072c-0.023-0.023-0.047-0.047-0.072-0.07 c-0.022,0-0.046-0.012-0.07-0.037c0-0.025-0.013-0.048-0.036-0.073c-0.023,0-0.048-0.011-0.072-0.035 c0-0.023-0.012-0.046-0.036-0.07c0-0.025-0.012-0.036-0.036-0.036c0-0.023-0.012-0.048-0.036-0.073 c-0.023-0.023-0.035-0.046-0.035-0.071c-0.024-0.024-0.048-0.048-0.073-0.07c-0.023,0-0.047-0.012-0.071-0.038 c-0.024-0.023-0.037-0.047-0.037-0.071c-0.024,0-0.036-0.012-0.036-0.036s0-0.048,0-0.072l-0.035-0.036c0-0.023,0-0.047,0-0.072 c-0.023-0.023-0.049-0.048-0.072-0.072c0-0.023-0.012-0.047-0.036-0.07c-0.023,0-0.036-0.013-0.036-0.037 c-0.024-0.023-0.035-0.048-0.035-0.07l-0.036-0.037c0-0.023-0.013-0.047-0.037-0.072l-0.071-0.07 c-0.024-0.024-0.047-0.049-0.071-0.072c0-0.024-0.013-0.048-0.036-0.072V27.34c0-0.023,0-0.047,0-0.072 c0-0.024-0.013-0.047-0.036-0.072c0-0.023-0.012-0.048-0.036-0.071c-0.024,0-0.036-0.011-0.036-0.036 c-0.024,0-0.049-0.012-0.071-0.035c0-0.023,0-0.048,0-0.072c0-0.024-0.012-0.047-0.037-0.071v-0.036 c0-0.024-0.011-0.048-0.035-0.073c0-0.023-0.012-0.047-0.037-0.07c0-0.024-0.012-0.037-0.035-0.037c0-0.025,0-0.048,0-0.073 v-0.036c0-0.023-0.012-0.048-0.036-0.071c0-0.023,0-0.048,0-0.072c-0.025,0-0.037-0.011-0.037-0.036 c0-0.022-0.011-0.046-0.035-0.071c0-0.024,0-0.047,0-0.071c0-0.025-0.013-0.037-0.037-0.037c0-0.023,0-0.048,0-0.071 c-0.023,0-0.035-0.013-0.035-0.037c0-0.024,0-0.047,0-0.071l-0.036-0.038c0-0.022,0-0.046,0-0.07s-0.012-0.047-0.036-0.071 c0-0.024-0.012-0.048-0.035-0.071l-0.036-0.038c0-0.023,0-0.045,0-0.07v-0.036c0-0.023-0.013-0.048-0.037-0.071v-0.037 c0-0.023,0-0.046,0-0.071s0-0.048,0-0.072s0-0.047,0-0.07c-0.022,0-0.034-0.014-0.034-0.037 c-0.024-0.024-0.048-0.048-0.072-0.072v-0.036c0-0.025,0-0.048,0-0.072v-0.037c0-0.023,0-0.046,0-0.07c0-0.024,0-0.048,0-0.073 c0-0.023,0-0.047,0-0.07v-0.037c-0.023-0.024-0.036-0.048-0.036-0.071v-0.035c-0.024-0.024-0.036-0.048-0.036-0.072v-0.037 c0-0.022,0-0.046,0-0.071c0-0.023-0.013-0.046-0.037-0.071v-0.037c0-0.023-0.012-0.046-0.036-0.071c0-0.023,0-0.047,0-0.071 v-0.036c0-0.025,0-0.048,0-0.071v-0.036c0-0.024,0-0.048,0-0.071c0-0.024,0-0.049,0-0.074v-0.034c0-0.025,0-0.047,0-0.072 c0-0.024,0-0.049,0-0.071v-0.073c0-0.023,0-0.047,0-0.071c0-0.024,0-0.047,0-0.07c0-0.025,0-0.05,0-0.073v-0.035 c0-0.024,0-0.047,0-0.071c0-0.024,0-0.049,0-0.072v-0.072c0-0.023,0-0.047,0-0.071s0-0.047,0-0.073c0-0.024,0-0.049,0-0.072 v-0.036c0-0.024,0-0.046,0-0.07c0-0.024,0-0.048,0-0.072v-0.072c0-0.024,0-0.046,0-0.071s0-0.049,0-0.073 c0-0.024,0-0.047,0-0.072v-0.037c0-0.023,0-0.047,0-0.071c0-0.024,0-0.047,0-0.071v-0.071c0-0.024,0-0.048,0-0.072 c0-0.024,0-0.048,0-0.072s0-0.048,0-0.072v-0.035c0.024-0.024,0.036-0.047,0.036-0.072c0-0.023,0.012-0.047,0.037-0.072v-0.071 c0-0.023,0-0.047,0-0.071c0-0.024,0-0.047,0-0.072v-0.036c0-0.024,0-0.047,0-0.07c0-0.023,0-0.048,0-0.073 c0-0.023,0.012-0.048,0.036-0.072v-0.035c0.024,0,0.036-0.013,0.036-0.037c0-0.023,0-0.047,0-0.071c0-0.024,0-0.048,0-0.071 v-0.037c0-0.024,0-0.047,0-0.072c0-0.023,0-0.048,0-0.072c0.024-0.023,0.048-0.047,0.072-0.072H0.59c0-0.022,0-0.047,0-0.07 c0-0.024,0-0.049,0-0.072s0-0.049,0-0.072v-0.036c0-0.024,0-0.048,0-0.071c0-0.024,0.013-0.049,0.037-0.072 c0-0.024,0-0.049,0-0.072c0-0.024,0-0.049,0-0.072c0-0.023,0-0.048,0-0.071c0.023-0.023,0.036-0.047,0.036-0.072 c0.023,0,0.035-0.013,0.035-0.035c0.024-0.025,0.047-0.049,0.072-0.072c0-0.024,0-0.047,0-0.072c0-0.023,0.012-0.034,0.035-0.034 v-0.036c0-0.025,0-0.048,0-0.073c0-0.023,0-0.048,0-0.071c0.023-0.023,0.037-0.049,0.037-0.073v-0.036 c0.023-0.023,0.046-0.047,0.071-0.072c0-0.023,0.013-0.048,0.036-0.071v-0.035c0.023,0,0.035-0.011,0.035-0.035 c0.024-0.026,0.037-0.049,0.037-0.071c0.024-0.026,0.035-0.049,0.035-0.073v-0.036c0-0.024,0-0.048,0-0.072 c0.025-0.024,0.037-0.047,0.037-0.072c0-0.022,0-0.046,0-0.071v-0.036c0.022,0,0.036-0.012,0.036-0.037 c0.023-0.023,0.035-0.048,0.035-0.071c0.024-0.024,0.049-0.048,0.072-0.073l0.036-0.035c0-0.023,0-0.047,0-0.071 c0.023-0.024,0.036-0.048,0.036-0.071c0.024-0.024,0.047-0.048,0.071-0.072L1.45,18.71c0.024-0.023,0.037-0.047,0.037-0.071 c0.023-0.025,0.036-0.049,0.036-0.073l0.035-0.034c0.024-0.025,0.036-0.051,0.036-0.074c0.024-0.023,0.036-0.047,0.036-0.072 c0.023-0.023,0.049-0.046,0.072-0.07c0.023,0,0.035-0.013,0.035-0.036c0.024,0,0.049-0.013,0.073-0.036 c0.023-0.024,0.047-0.048,0.071-0.073c0.024-0.023,0.049-0.047,0.073-0.07l0.035-0.036c0.024-0.025,0.036-0.049,0.036-0.074 c0.024-0.022,0.049-0.046,0.072-0.07c0.024-0.024,0.049-0.048,0.072-0.073c0.023,0,0.036-0.012,0.036-0.035 c0.024,0,0.048-0.013,0.07-0.035c0.024-0.025,0.048-0.049,0.072-0.074c0.024-0.022,0.048-0.047,0.072-0.071L2.455,17.6 c0.022-0.023,0.034-0.048,0.034-0.071c0.025-0.024,0.048-0.047,0.071-0.072c0.024-0.024,0.049-0.037,0.072-0.037 c0-0.023,0.014-0.048,0.037-0.07c0.047,0,0.095-0.014,0.142-0.037c0.024-0.023,0.047-0.047,0.071-0.071 c0.025-0.025,0.061-0.047,0.109-0.072c0.046,0,0.083,0,0.107,0c0.024,0,0.059,0,0.108,0c0.023-0.023,0.046-0.047,0.07-0.072 c0.047-0.023,0.098-0.048,0.143-0.073c0.072-0.023,0.121-0.046,0.145-0.071c0.047,0,0.096-0.01,0.142-0.034 c0.048-0.025,0.108-0.036,0.18-0.036c0.024,0,0.048-0.012,0.072-0.037h0.037c0.047-0.023,0.093-0.035,0.141-0.035 c0.047-0.025,0.084-0.038,0.108-0.038c0.047-0.023,0.094-0.035,0.142-0.035c0.049,0,0.084,0,0.108,0 c0.048,0,0.095-0.012,0.143-0.035h0.036c0.048-0.024,0.095-0.037,0.143-0.037c0.096-0.023,0.203-0.034,0.322-0.034 c0.025-0.025,0.061-0.049,0.109-0.072c0.046,0,0.095-0.012,0.143-0.036c0.023-0.025,0.047-0.037,0.071-0.037 c0.048,0,0.084-0.013,0.108-0.036l0.036-0.036c0.049,0,0.095,0,0.143,0c0.216,0,0.442-0.011,0.68-0.035c0.024,0,0.049,0,0.072,0 c0.024,0,0.059,0,0.108,0v-0.035c0.118,0,0.236,0,0.356,0V16.24c0-0.024,0-0.047,0-0.072c0-0.023,0-0.048,0-0.072V16.06 c0-0.024,0-0.048,0-0.071c0-0.024,0-0.048,0-0.072c0-0.023,0-0.047,0-0.072v-0.07c0-0.025,0-0.049,0-0.073 c0-0.025,0-0.049,0-0.072v-0.036c0-0.023,0-0.047,0-0.072c0-0.023,0-0.046,0-0.071c0-0.024,0-0.048,0-0.072v-0.072 c0-0.023,0-0.048,0-0.071c0-0.025,0-0.048,0-0.072v-0.037c0-0.023,0-0.047,0-0.071c0-0.024,0-0.047,0-0.073 c-0.023-0.023-0.036-0.046-0.036-0.07v-0.071c0-0.023,0-0.048,0-0.071c0-0.024,0-0.048,0-0.073v-0.035c0-0.024,0-0.049,0-0.072 s0-0.048,0-0.072v-0.036c0-0.024,0-0.048,0-0.072v-0.036c-0.096,0-0.191,0-0.286,0c0-0.023-0.013-0.047-0.035-0.071 c0-0.022,0-0.047,0-0.07c0-0.025,0-0.048,0-0.073c-0.024,0-0.061,0-0.108,0c0-0.025,0-0.047,0-0.071v-0.072 c0-0.024,0-0.047,0-0.071c0-0.025,0-0.049,0-0.073v-0.108c0-0.023,0-0.045,0-0.071c0-0.023,0-0.047,0-0.069v-0.323 c0-0.024,0-0.047,0-0.071c0-0.024,0-0.048,0-0.072v-0.036c0-0.024,0-0.049,0-0.072c0-0.024,0-0.049,0-0.072s0-0.049,0-0.071 v-0.071c0-0.023,0-0.048,0-0.072c0-0.024,0-0.048,0-0.071v-0.036c0-0.026,0-0.049,0-0.073c0-0.025,0-0.047,0-0.071 c0-0.024,0-0.049,0-0.073v-0.071c0-0.023,0-0.048,0-0.071c0-0.024,0-0.047,0-0.071v-0.035c0-0.024,0-0.049,0-0.073 s0-0.048,0-0.072c0-0.024,0-0.048,0-0.072v-0.071c0-0.024,0-0.048,0-0.071c0-0.024,0-0.049,0-0.072v-0.035 c0-0.025,0-0.048,0-0.072c0-0.024,0-0.048,0-0.072c0-0.023,0-0.047,0-0.072v-0.071c0-0.026,0-0.049,0-0.072 c0-0.024,0-0.048,0-0.071v-0.036c0-0.024,0-0.049,0-0.072c0-0.024,0-0.048,0-0.072v-0.034c0-0.025,0-0.051,0-0.074v-0.035 c0-0.025,0-0.049,0-0.072v-0.036c0-0.024,0-0.048,0-0.071c0-0.025,0-0.049,0-0.072s0-0.047,0-0.072v-0.036 c0-0.025,0-0.048,0-0.072v-0.036c0-0.024,0-0.048,0-0.072v-0.035c0-0.025,0-0.049,0-0.072c0-0.024,0-0.048,0-0.072 c0-0.022,0-0.046,0-0.071v-0.036c0-0.023,0-0.047,0-0.071v-0.036c0-0.024,0-0.047,0-0.072V9.937c0-0.024,0-0.049,0-0.072 c0-0.024,0-0.047,0-0.071c0-0.023,0-0.048,0-0.072V9.685c0-0.023,0-0.047,0-0.071V9.578c0-0.022,0-0.046,0-0.072V9.471 c-0.239,0-0.466,0.013-0.681,0.035c-0.048,0-0.083,0-0.107,0C5.666,9.531,5.617,9.542,5.569,9.542H5.534 c-0.049,0-0.085,0-0.107,0C5.378,9.52,5.318,9.506,5.248,9.506c-0.048,0-0.083-0.011-0.109-0.035 C5.093,9.447,5.032,9.422,4.96,9.399c-0.024-0.023-0.036-0.047-0.036-0.07C4.901,9.305,4.876,9.282,4.853,9.256 c-0.025,0-0.036-0.012-0.036-0.036C4.792,9.197,4.781,9.173,4.781,9.148V9.113C4.757,9.089,4.746,9.064,4.746,9.042V9.006 c0-0.026,0-0.049,0-0.073c0-0.022,0-0.047,0-0.071c0-0.023,0.011-0.036,0.036-0.036c0-0.023,0-0.047,0-0.071 c0-0.023,0.011-0.046,0.036-0.072l0.036-0.036C4.876,8.625,4.901,8.6,4.924,8.576L4.96,8.54c0.048-0.024,0.096-0.037,0.144-0.037 h0.035V8.469c0-0.024,0-0.047,0-0.072V8.36c0-0.023,0-0.047,0-0.07c0-0.025,0-0.046,0-0.074V8.182l0.037-0.036 C5.2,8.123,5.223,8.099,5.248,8.075c0.023-0.023,0.036-0.048,0.036-0.072C5.305,7.978,5.331,7.955,5.354,7.93 c0-0.023,0.012-0.037,0.036-0.037c0.023-0.022,0.047-0.046,0.071-0.07c0.048,0,0.084-0.011,0.108-0.035l0.036-0.036 c0.049,0,0.095,0,0.143,0c0.167,0,0.334,0,0.501,0V7.716C6.273,7.692,6.297,7.68,6.322,7.68c0.022-0.023,0.046-0.047,0.071-0.071 c0.047,0,0.084-0.011,0.107-0.035V7.538c0-0.024,0-0.048,0-0.071c1.766,0,3.522,0,5.264,0V7.43c0-0.024,0-0.048,0-0.073 c0-0.022,0-0.047,0-0.07c0-0.025,0-0.048,0-0.071V7.18c0-0.024,0-0.048,0-0.072c0-0.025,0-0.048,0-0.072V6.964 c0-0.024,0-0.047,0-0.071c0-0.025,0-0.049,0-0.072V6.785c0-0.023,0-0.046,0-0.07c0-0.023,0-0.047,0-0.071V6.606 c0.025-0.024,0.061-0.036,0.108-0.036V6.535c0.31,0,0.621,0,0.931,0V6.57c0,0.024,0,0.048,0,0.073c0,0.023,0,0.048,0,0.071 c0,0.024,0,0.047,0,0.07l0.036,0.037c0,0.023,0,0.046,0,0.072c0.024,0.023,0.036,0.046,0.036,0.071L12.911,7v0.036 c0.024,0.024,0.035,0.047,0.035,0.072c0,0.024,0,0.048,0,0.072c0,0.022-0.011,0.036-0.035,0.036c0,0.023,0,0.046,0,0.071 c-0.024,0.023-0.036,0.047-0.036,0.07c-0.024,0.024-0.036,0.048-0.036,0.073v0.072c0,0.023,0,0.046,0,0.072 c0.048,0,0.096,0,0.143,0c0.025,0.023,0.049,0.047,0.071,0.07c0.025,0.025,0.048,0.036,0.073,0.036 c0.023,0.024,0.036,0.048,0.036,0.073c0.024,0,0.048,0.013,0.072,0.036c0.024,0.024,0.036,0.047,0.036,0.071l0.037,0.034 c0.023,0.024,0.035,0.05,0.035,0.073c0.024,0.024,0.037,0.048,0.037,0.073v0.036c0.024,0.024,0.035,0.048,0.035,0.071v0.036 c0,0.025,0,0.049,0,0.071c0,0.023-0.011,0.047-0.035,0.071V8.36h0.035c0,0.024,0.012,0.049,0.035,0.072c0,0.023,0,0.049,0,0.071 c0.024,0.024,0.037,0.048,0.037,0.073l0.035,0.036c0,0.024,0,0.049,0,0.072c0,0.026,0,0.048,0,0.072 c0.024,0.024,0.037,0.048,0.037,0.071h0.036c0.023,0.023,0.035,0.048,0.035,0.071c0.024,0,0.049,0.014,0.072,0.036 c0.024,0.024,0.036,0.047,0.036,0.073l0.037,0.035c0.023,0.023,0.035,0.048,0.035,0.071l0.037,0.036c0,0.024,0,0.048,0,0.071 l0.035,0.036c0,0.026,0,0.049,0,0.073c0,0.023,0.012,0.047,0.037,0.07c0,0.023,0,0.048,0,0.072l0.035,0.035 c0,0.025,0,0.05,0,0.072l0.035,0.036c0,0.024,0,0.048,0,0.071l0.037,0.037c0,0.024,0.012,0.048,0.035,0.072 c0,0.024,0,0.047,0,0.071c0.024,0.023,0.047,0.048,0.072,0.072c0.024,0,0.037,0.013,0.037,0.035 c0.022,0.025,0.034,0.048,0.034,0.072v0.036c0,0.024,0,0.048,0,0.071l0.037,0.036c0.023,0.024,0.047,0.049,0.072,0.071 c0,0.023,0.011,0.047,0.036,0.072c0,0.023,0.012,0.047,0.035,0.072v0.035c0.023,0.024,0.036,0.048,0.036,0.072v0.036 c0.024,0.024,0.036,0.047,0.036,0.072c0.022,0,0.047,0.012,0.07,0.036c0,0.024,0,0.049,0,0.072 c0.024,0.023,0.036,0.047,0.036,0.072c0,0.023,0,0.047,0,0.071c0.024,0,0.037,0.013,0.037,0.036 c0.024,0.022,0.036,0.047,0.036,0.072v0.035c0,0.023,0.011,0.049,0.035,0.074l0.036,0.034c0,0.024,0.012,0.048,0.038,0.072 c0,0.022,0.01,0.047,0.033,0.072v0.036c0.025,0.023,0.038,0.047,0.038,0.071c0.023,0.023,0.035,0.046,0.035,0.072l0.036,0.034 C14.879,11.5,14.892,11.512,14.917,11.512z M1.415,21.896c0-0.023,0-0.047,0-0.071c0-0.024,0-0.047,0-0.072v-0.036l-0.036,0.036 c0,0.024,0,0.048,0,0.072c-0.024,0.024-0.035,0.048-0.035,0.071v0.071c0,0.025,0,0.049,0,0.072c0,0.023,0,0.048,0,0.072 c0-0.024,0.012-0.049,0.035-0.072c0-0.023,0-0.047,0-0.072c0.025,0,0.036-0.011,0.036-0.035V21.896z"/></svg>'))
	}
}

local screenSizeX, screenSizeY = draw.GetScreenSize()

local ref = gui.Tab(gui.Reference("Settings"), "flex_nade", "🐺 Flex 投掷物助手 v2");
local guiHelperSettingsBlock = gui.Groupbox(ref, "投掷物助手设置", 16, 16, 290, 250);
local guiHelperEnable = gui.Checkbox(guiHelperSettingsBlock , "nade_enable", "开启", 1);
local guiHelperType = gui.Combobox(guiHelperSettingsBlock, "nade_type", "投掷瞄准模式", "合法 [平滑]", "暴力 [静默]");
local guiHelperFOV = gui.Slider(guiHelperSettingsBlock, "nade_fov", "瞄准有效范围", 10, 1, 360);
local guiHelperSpeed = gui.Slider(guiHelperSettingsBlock, "nade_smooth", "平滑度 [瞄准速度]", 75, 1, 100);
local guiVisualsSettingsBlock = gui.Groupbox(ref, "视觉设置", 322, 16, 300, 250);
local guiHelperRageMode = gui.Checkbox(guiHelperSettingsBlock , "nade_rp", "屏蔽视觉 [HvH/直播支持]", 0);

local guiHelperAnimSpeed = gui.Slider(guiVisualsSettingsBlock, "nade_anim_speed", "点位展开速度", 4, 1, 10);
local guiHelperVisCheck = gui.Checkbox(guiVisualsSettingsBlock , "nade_vis_check", "墙后掩体显示", 1);
local guiHelperInvisTranc = gui.Slider(guiVisualsSettingsBlock, "nade_invs_tranc", "点位透明度[非手持]", 50, 15, 100);
local guiHelperInacTranc = gui.Slider(guiVisualsSettingsBlock, "nade_inac_tranc", "点位透明度[当前手持]", 55, 0, 100);
local guiHelperMaxDist = gui.Slider(guiVisualsSettingsBlock, "nade_max_distance", "点位显示距离", 800, 1, 2500);
local guiHelperOpenDist = gui.Slider(guiVisualsSettingsBlock, "nade_open_distance", "点位展开距离", 500, 1, 2500);

local guiHelperSyncColor = gui.Checkbox(guiVisualsSettingsBlock , "nade_sycn_color", "匹配个人主题配色", 0);
local guiHelperTextColor = gui.ColorPicker(guiVisualsSettingsBlock, "nade_text_color", "文字颜色", 181, 170, 241, 255);
local guiHelperSelectedTextColor = gui.ColorPicker(guiVisualsSettingsBlock, "nade_stext_color", "已选中文字颜色", 216, 216, 216, 255);
local guiHelperOutlineColor = gui.ColorPicker(guiVisualsSettingsBlock, "nade_outline_color", "轮廓颜色", 221, 198, 255, 181);
local guiHelperDelimiterColor = gui.ColorPicker(guiVisualsSettingsBlock, "nade_deli_color", "分隔符号颜色", 221, 198, 255, 181);
local guiHelperBackColor = gui.ColorPicker(guiVisualsSettingsBlock, "nade_back_color", "背景颜色", 0, 0, 0, 141);

local NadesData = {};

local max_adding_percent = 15;
local max_dots_draw_dist = 30;
local paddings = 5;
local delimiter_pad = 5;
local small_indc_size_x = 20;
local small_indc_size_y = 20;
local textFont = draw.CreateFont("Verdana", 13);

function string:split(inSplitPattern, outResults)
   if not outResults then
      outResults = { }
   end
   local theStart = 1
   local theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
   while theSplitStart do
      table.insert( outResults, string.sub( self, theStart, theSplitStart-1 ) )
      theStart = theSplitEnd + 1
      theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
   end
   table.insert( outResults, string.sub( self, theStart ) )
   return outResults
end

local IsChanged = false;
local cfgVars = { { "misc.duckjump", false }, { "misc.fastduck", false }, { "misc.autothrow", false }, { "misc.strafe.enable", false } };
local function save_user_cfg()
	for i = 1, #cfgVars do
		cfgVars[i][2] = gui.GetValue(cfgVars[i][1]);
	end
end

local function restore_user_cfg()
	if not IsChanged then return; end
	
	for i = 1, #cfgVars do
		gui.SetValue(cfgVars[i][1], cfgVars[i][2]);
	end
	IsChanged = false;
end

local function change_user_cfg()
	if IsChanged then return; end
	
	save_user_cfg();
	for i = 1, #cfgVars do
		gui.SetValue(cfgVars[i][1], false);
	end
	IsChanged = true;
	
	return IsChanged;
end

local function AngleNormalize(pitch, yaw)
	if not (yaw > -180 and yaw <= 180) then
		yaw = math.fmod(math.fmod(yaw + 360, 360), 360)
		yaw = yaw > 180 and yaw-360 or yaw
	end
	
	return math.max(-89, math.min(89, pitch)), yaw
end

local function getAngleDifference(viewAngle, targetAngle)
	local dp, dy = AngleNormalize(viewAngle.x - targetAngle.x, viewAngle.y - targetAngle.y);
	return math.sqrt(dp*dp + dy*dy);
end

local function getMaxTextSize(array)
	local max_x = nil;
	local y = 0;
	local x = 1;
	for i = 1, #array do
		local text_x, text_y = draw.GetTextSize(array[i]);
		if not max_x then
			max_x = text_x;
		elseif text_x > max_x then
			max_x = text_x;
		end
		
		y = y + text_y + 4;
		x = i;
	end
	
	return { max_x, y + 9 };
end

local function getThrowPosition(pos_x, pos_y, pos_z, ax, ay, distance, z_offset)
    return pos_x - distance * math.cos(math.rad(ay + 180)), pos_y - distance * math.sin(math.rad(ay + 180)), pos_z - distance * math.tan(math.rad(ax)) + z_offset;
end

local function IsValidGrenade(currNade, spotNade)
	local bRes = false;
	if currNade == 44 and spotNade == 3 then
		bRes = true;
	elseif currNade == 45 and spotNade == 2 then
		bRes = true;
	elseif (currNade == 46 or currNade == 48) and spotNade == 1 then
		bRes = true;
	end
	
	return bRes;
end

local selectedSpot = { false, nil, nil, nil };

local function draw_ground_spots(localPlayer, localWeapon)
	local localPosition = localPlayer:GetPropVector("m_vecOrigin");
	local closestIndex = nil;
	local closestDist = nil;
	
	for i = 1, #NadesData do
		local nadeInfo = NadesData[i];
		local distanceToSpot = (Vector3(localPosition.x, localPosition.y, localPosition.z) - Vector3(nadeInfo[1], nadeInfo[2], nadeInfo[3])):Length();
		local isValidNade = IsValidGrenade(localWeapon, nadeInfo[5]);
		
		if max_dots_draw_dist >= distanceToSpot and isValidNade then
			if not closestDist then
				closestDist = distanceToSpot;
				closestIndex = i;
			elseif closestDist > distanceToSpot then
				closestDist = distanceToSpot;
				closestIndex = i;
			end
		end
		
		local screenPosX, screenPosY = client.WorldToScreen(Vector3(nadeInfo[1], nadeInfo[2], nadeInfo[3]));
		if not screenPosX and not screenPosY then
			goto continue;
		end
		
		local trancProc = 0;
		local animMinus = false;
		local animSpeed = guiHelperAnimSpeed:GetValue();

		if not isValidNade then
			local tranc = 100 - nadeInfo[4];
			if tranc > guiHelperInacTranc:GetValue() then
				tranc = guiHelperInacTranc:GetValue();
			end
			trancProc = tranc;
		end
		
		local maxDist = guiHelperMaxDist:GetValue();
		if distanceToSpot > maxDist then
			local procDist = (distanceToSpot / maxDist) * 100 - 100;
			if procDist > max_adding_percent then
				nadeInfo[4] = 0;
				goto continue;
			end
			local tranc = 100 / (max_adding_percent / procDist);
			
			if trancProc < tranc then
				trancProc = tranc;
			end
		end
		
		if guiHelperVisCheck:GetValue() then
			local pointerTrace = engine.TraceLine(localPlayer:GetPropVector("m_vecOrigin") + localPlayer:GetPropVector("localdata", "m_vecViewOffset[0]"), Vector3(nadeInfo[1], nadeInfo[2], nadeInfo[3]));			
			if pointerTrace.fraction ~= 1 then
				local tranc = guiHelperInvisTranc:GetValue();
				if trancProc < tranc then 
					trancProc = tranc;
				end 
			end
		end
		
		if distanceToSpot > guiHelperOpenDist:GetValue() or not isValidNade or (selectedSpot[2] and selectedSpot[3]) then
			if nadeInfo[4] - animSpeed > 0 then
				nadeInfo[4] = nadeInfo[4] - animSpeed;
			else
				nadeInfo[4] = 0;
			end
			animMinus = true;
		end
			
		local start_x = 0;
		local end_x = 0;
		local start_y = 0;
		local end_y = 0;
		
		if nadeInfo[4] == 0 then --it can be deleted, but i think that this shit can save fps xD
			start_x = screenPosX - small_indc_size_x / 2;
			end_x = start_x + small_indc_size_x;
			start_y = screenPosY - small_indc_size_y + 1.4;
			end_y = screenPosY;
		else
			local textSize = getMaxTextSize(nadeInfo[6]);
			
			local max_x = screenPosX + small_indc_size_x + textSize[1] + paddings + delimiter_pad;
			local icon_end_x = screenPosX + small_indc_size_x;		
			local animComp = (((max_x - icon_end_x) / 100) * nadeInfo[4]) / 2;		
			start_x = screenPosX - small_indc_size_x / 2 - animComp;
			end_x = screenPosX + small_indc_size_x / 2 + animComp;
			local max_y = screenPosY - textSize[2];
			local icon_end_y = screenPosY - small_indc_size_y + 1.4;		
			start_y = icon_end_y - (((icon_end_y - max_y) / 100) * nadeInfo[4]);
			end_y = screenPosY;
		end
		
		local nadeIcon = nade_icons_texture[nadeInfo[5]];
		local center_y = start_y + (end_y - start_y) / 2;
		local icon_start_y = center_y - small_indc_size_y / 2 - 1;
		local icon_end_y = center_y + small_indc_size_y / 2 - 3;
		
		local r,g,b,a = guiHelperBackColor:GetValue();
		a = a - (a / 100) * trancProc; 
		draw.Color(r,g,b,a);
		draw.FilledRect(start_x, start_y, end_x, end_y);
		
		r,g,b,a = guiHelperOutlineColor:GetValue();
		a = a - (a / 100) * trancProc;
		draw.Color(r,g,b,a);
		draw.Line(start_x, start_y, end_x, start_y);
		draw.Line(start_x, start_y, start_x, end_y);
		draw.Line(end_x, start_y, end_x, end_y);
		draw.Line(start_x, end_y, end_x, end_y);
		
		if nadeInfo[4] > 5 then
			r,g,b,a = guiHelperDelimiterColor:GetValue();
			a = a - (a / 100) * trancProc;
			draw.Color(r,g,b,a);
			draw.Line(start_x + small_indc_size_x, start_y + 5, start_x + small_indc_size_x, end_y - 5); -- delimiter
		end
		
		r,g,b,a = guiHelperTextColor:GetValue();
		a = a - (a / 100) * trancProc;
		draw.Color(r,g,b,a);	
		draw.SetTexture(nadeIcon[3]);
		draw.FilledRect(start_x + paddings + nadeIcon[1], icon_start_y, start_x + nadeIcon[2], icon_end_y);
		draw.SetTexture(nil);
			
		if nadeInfo[4] == 100 then 
			local temp_y = 0;
			for i = 1, #nadeInfo[6] do
				local text_x, text_y = draw.GetTextSize(nadeInfo[6][i]);
				local center_x = end_x - (end_x - (start_x + small_indc_size_x + delimiter_pad)) / 2 - 2.5;
				draw.TextShadow(math.ceil(center_x - text_x / 2), start_y + 5 + temp_y, nadeInfo[6][i]);
				temp_y = temp_y + text_y + 4;
			end
		end
				
		if not animMinus and nadeInfo[4] + animSpeed < 100 then
			nadeInfo[4] = nadeInfo[4] + animSpeed;
		elseif not animMinus then
			nadeInfo[4] = 100;
		end

		::continue::
	end
	
	return { closestIndex, closestDist };
end

local function draw_aim_points(localViewAngles, nadeIndex, groundDistSpot)
	local selectedNade = NadesData[nadeIndex];
	local closestSpot = { nil, nil, 0, 0, 0, "", 0 };
	local IsSelected = false;
	
	for i = 1, #selectedNade[7] do
		local dotInfo = selectedNade[7][i];		
		local dotWorldPosX, dotWorldPosY, dotWorldPosZ = getThrowPosition(selectedNade[1], selectedNade[2], selectedNade[3], dotInfo[1], dotInfo[2], dotInfo[3], 64);
		local dotScreenX, dotScreenY = client.WorldToScreen( Vector3(dotWorldPosX, dotWorldPosY, dotWorldPosZ) );
		local dotTrancProc = 0;
		local selected_text_x = 0;
		local selected_text_y = 0;
		
		if dotScreenX and dotScreenY then
			if groundDistSpot <= max_dots_draw_dist then
				dotTrancProc = 100 / (max_dots_draw_dist / groundDistSpot);
				if dotTrancProc < 20 then
					dotTrancProc = 0;
				end
			end
			
			local textX, textY = draw.GetTextSize(selectedNade[6][i]);
			local deli_indc_x = small_indc_size_x / 2;
			local deli_indc_y = small_indc_size_y / 2;
			local delimiter_start = dotScreenX + deli_indc_x;
			local start_x = dotScreenX - deli_indc_x;
			local start_y = dotScreenY - deli_indc_y;
			local end_x = delimiter_start + textX + delimiter_pad * 2;
			local end_y = dotScreenY + deli_indc_y;
			
			local r,g,b,a = guiHelperBackColor:GetValue();
			a = a - (a / 100) * dotTrancProc; 			
			draw.Color(r,g,b,a);
			draw.FilledRect(start_x, start_y, end_x, end_y);
			
			r,g,b,a = guiHelperOutlineColor:GetValue();
			a = a - (a / 100) * dotTrancProc;
			draw.Color(r,g,b,a);
			draw.Line(start_x, start_y, end_x, start_y);
			draw.Line(start_x, start_y, start_x, end_y);
			draw.Line(end_x, start_y, end_x, end_y);
			draw.Line(start_x, end_y, end_x, end_y);
			
			r,g,b,a = guiHelperDelimiterColor:GetValue();
			a = a - (a / 100) * dotTrancProc;
			draw.Color(r,g,b,a);
			draw.Line(delimiter_start, start_y + 4, delimiter_start, end_y - 4);
			
			r,g,b,a = guiHelperTextColor:GetValue();
			a = a - (a / 100) * dotTrancProc;
			draw.Color(r,g,b,a);
			draw.FilledCircle(dotScreenX, dotScreenY, 3);
			selected_text_x = math.ceil(delimiter_start + delimiter_pad);
			selected_text_y = start_y + 4.5;
			draw.TextShadow(selected_text_x, selected_text_y, selectedNade[6][i]);	
		end
				
		local dist_to_aim_dot = getAngleDifference(Vector3(localViewAngles.pitch, localViewAngles.yaw, 0), Vector3(dotInfo[1], dotInfo[2], 0));
		if dist_to_aim_dot <= guiHelperFOV:GetValue() then 
			if not closestSpot[1] and not closestSpot[2] then
				if not selectedSpot[1] then
					selectedSpot[3] = i;
				end
				
				closestSpot = { dotScreenX, dotScreenY, dist_to_aim_dot, selected_text_x, selected_text_y, selectedNade[6][i], dotTrancProc };
			elseif closestSpot[3] > dist_to_aim_dot then
				if not selectedSpot[1] then
					selectedSpot[3] = i;
				end
				
				closestSpot = { dotScreenX, dotScreenY, dist_to_aim_dot, selected_text_x, selected_text_y, selectedNade[6][i], dotTrancProc };
			end
			IsSelected = true;
		end
	end
	
	if not IsSelected then
		if not selectedSpot[1] then
			selectedSpot[3] = nil;
		end
	end
	
	return closestSpot;
end

local function draw_selected_aim_point(closestAimPoint)
	local r,g,b,a = guiHelperSelectedTextColor:GetValue();
	a = a - (a / 100) * closestAimPoint[7];
	draw.Color(r,g,b,a);
	draw.FilledCircle(closestAimPoint[1], closestAimPoint[2], 3);
	draw.TextShadow(closestAimPoint[4], closestAimPoint[5], closestAimPoint[6]);
end

local function grenade_info()
	if not guiHelperEnable:GetValue() then return; end
	
	local localPlayer = entities.GetLocalPlayer();

	if not localPlayer or not localPlayer:IsAlive() then 
		return; 
	end
		
	local localViewAngles = engine:GetViewAngles();
	local localWeapon = localPlayer:GetWeaponID();
	local groundNadeInfo = { 0, 0 };
	local closestAimPoint = { nil, nil, 0, 0, 0, "", 0 };	
	draw.SetFont(textFont);
	
	if localWeapon ~= 44 and localWeapon ~= 45 and localWeapon ~= 46 and localWeapon ~= 48 then
		return;
	end
	
	groundNadeInfo = draw_ground_spots(localPlayer, localWeapon);	
	if not groundNadeInfo[1] then
		if not selectedSpot[1] then
			selectedSpot[2] = nil;
		end
		return;
	else
		if not selectedSpot[1] then
			selectedSpot[2] = groundNadeInfo[1];
		end
	end
	
	if selectedSpot[1] then return; end
	
	closestAimPoint = draw_aim_points(localViewAngles, groundNadeInfo[1], groundNadeInfo[2]);	
	if not closestAimPoint[1] and not closestAimPoint[2] then
		return;
	end
	
	draw_selected_aim_point(closestAimPoint);
	
end

local function gui_handler()
	local helperType = guiHelperType:GetValue();

	if helperType == 1 then
		guiHelperSpeed:SetDisabled(true);
	else
		guiHelperSpeed:SetDisabled(false);
	end

	if guiHelperSyncColor:GetValue() then
		guiHelperTextColor:SetValue(gui.GetValue("theme.header.text"));
		guiHelperSelectedTextColor:SetValue(gui.GetValue("theme.tablist.textactive"));
		guiHelperOutlineColor:SetValue(gui.GetValue("theme.header.line"));
		guiHelperDelimiterColor:SetValue(gui.GetValue("theme.header.line"));
		guiHelperBackColor:SetValue(gui.GetValue("theme.ui.bg1"));
		guiHelperSyncColor:SetValue(0);
	end
end

local function is_nade_ready(localPlayer)
	local localWeapon = localPlayer:GetPropEntity("m_hActiveWeapon");
	return localWeapon:GetPropBool("m_bPinPulled");
end

local function is_in_move(UserCmd)
	local v1 = bit.band(UserCmd.buttons, 8) == 8
    local v2 = bit.band(UserCmd.buttons, 16) == 16
    local v3 = bit.band(UserCmd.buttons, 512) == 512
    local v4 = bit.band(UserCmd.buttons, 1024) == 1024
    return (v1 or v2 or v3 or v4);
end

local function clamp(val, imin, imax)
	if val > imax then
        val = imax;
    elseif val < imin then
        val = imin;
    end
	
    return val;
end

local function move_to_spot(UserCmd)
	local tNade = selectedSpot[2];
	local localPlayer = entities.GetLocalPlayer();
	local localPosition = localPlayer:GetPropVector("m_vecOrigin");
	localPosition.z = 0;
	local localFlags = localPlayer:GetPropInt("m_fFlags");
	local vecDelta = (Vector3(NadesData[tNade][1], NadesData[tNade][2], 0) - localPosition);
	local iDistance = vecDelta:Length2D();
	local IsComplite = false;
	gui.SetValue("rbot.antiaim.advanced.antialign", 1);
	
	if localFlags == 256 then
		return false;
	end
	
	if iDistance > 0.01 then
		local localViewAngles = engine.GetViewAngles();
        local vecDir = vecDelta:Angles();
        vecDir.yaw = localViewAngles.yaw - vecDir.yaw
        local vecMove = vecDir:Forward();
		local in_duck = bit.band(UserCmd.buttons, 4) == 4
		
		UserCmd.forwardmove = vecMove.x * (450.0 * (math.exp(clamp(iDistance, 0.0, 5.0) - 5.0)) - 2.0);
        UserCmd.sidemove = vecMove.y * (450.0 * (math.exp(clamp(iDistance, 0.0, 5.0) - 5.0)) - 2.0);
		if in_duck then
            UserCmd.forwardmove = UserCmd.forwardmove * 2.93
            UserCmd.sidemove = UserCmd.sidemove * 2.93
        end
	else
		IsComplite = true;
	end
	
	return IsComplite;
end

local function directional_move(UserCmd, aimAngles, Speed, Degrees)
	local localViewAngles = engine.GetViewAngles();
    local vecDiff = localViewAngles.yaw - (aimAngles.yaw + Degrees);
    local vecMove = EulerAngles(0, vecDiff, 0):Forward();
    UserCmd.forwardmove = vecMove.x * Speed;
    UserCmd.sidemove = vecMove.y * Speed;
end

local function smooth_aim_assist(is_start_moving)
	local tNade = selectedSpot[2];
	local tDot = selectedSpot[3];
	local localViewAngles = engine.GetViewAngles();
	local aimAngles = EulerAngles(NadesData[tNade][7][tDot][1], NadesData[tNade][7][tDot][2], 0);
	local IsComplite = false;
	
	if getAngleDifference(localViewAngles, aimAngles) > 0.01 then
		if not is_start_moving then
			local aimSmooth = (180 / 100) * guiHelperSpeed:GetValue() / 1000;
			local aim_pitch, aim_yaw = aimAngles.pitch, aimAngles.yaw
			local dp, dy = AngleNormalize(localViewAngles.pitch - aim_pitch, localViewAngles.yaw - aim_yaw)

			local pitch = localViewAngles.pitch - dp * aimSmooth;
			local yaw = localViewAngles.yaw - dy * aimSmooth;

			engine.SetViewAngles(EulerAngles(pitch, yaw, 0));
		else
			engine.SetViewAngles(aimAngles);
		end
	else
		IsComplite = true;
	end
	
	return IsComplite;
end

local function silent_aim_assist(UserCmd)
	local tNade = selectedSpot[2];
	local tDot = selectedSpot[3];
	local aimAngles = EulerAngles(NadesData[tNade][7][tDot][1], NadesData[tNade][7][tDot][2], 0);
	UserCmd.viewangles = aimAngles;
end

local delayedEnd = false;
local delayedDuck = 0;
local function movement_helper(UserCmd)
	if not guiHelperEnable:GetValue() then return; end
	
	local localPlayer = entities.GetLocalPlayer();

	if not localPlayer or not localPlayer:IsAlive() then 
		return; 
	end
	
	local aimType = guiHelperType:GetValue();
	if not selectedSpot[2] then
		selectedSpot[4] = nil;
		selectedSpot[1] = false;
		return;
	end
	
	local IsValid = IsValidGrenade(localPlayer:GetWeaponID(), NadesData[selectedSpot[2]][5]);
	if not IsValid and not delayedEnd then
		selectedSpot = { false, nil, nil, nil };
		restore_user_cfg();
		return;
	end
	
	if IsValid then
		local throwTime = localPlayer:GetPropEntity("m_hActiveWeapon"):GetPropFloat("m_fThrowTime");
		if throwTime > 0 and throwTime < globals.CurTime() then
			if aimType == 1 and selectedSpot[3] then
				silent_aim_assist(UserCmd);
				
				if not delayedEnd then
					selectedSpot[1] = false;
				end
			end
		end
	end
	
	if delayedDuck ~= 0 and delayedDuck < 6 then
		UserCmd.buttons = bit.bor(UserCmd.buttons, 4);
		delayedDuck = delayedDuck + 1;
	end
	
	if not delayedEnd then	
		if not is_nade_ready(localPlayer) or change_user_cfg() then return; end
		
		local is_start_moving = selectedSpot[1];
		local groundCheck = true;
		local aimCheck = false;
		
		if is_in_move(UserCmd) then
			selectedSpot[1] = false;
			selectedSpot[4] = nil;
			restore_user_cfg();
			return; 
		end
		
		if not is_start_moving then
			groundCheck = move_to_spot(UserCmd);		
		end
		
		if selectedSpot[3] then
			if aimType == 0 then
				aimCheck = smooth_aim_assist(is_start_moving);			
				if is_start_moving then
					aimCheck = true;
				end
			else
				aimCheck = true;
			end
		end
		
		if not aimCheck or not groundCheck then return; end
	end
	
	local tDot = selectedSpot[3];
	local targetNade = NadesData[selectedSpot[2]];
	local startActionType = targetNade[7][tDot][4] == 1;
	local shouldJump = targetNade[7][tDot][5] == 1;
	local shouldDuck = targetNade[7][tDot][6] == 1;
	local delayTicks = targetNade[7][tDot][7];
	local moveSpeed = targetNade[7][tDot][8];
	local moveDegrees = targetNade[7][tDot][9];
	local localFlags = localPlayer:GetPropInt("m_fFlags");
	
	if not startActionType then
		local inAir = (localFlags == 256);
		if shouldDuck then
			UserCmd.buttons = bit.bor(UserCmd.buttons, 4);

			if localPlayer:GetPropFloat("m_flDuckAmount") < 0.90 and not inAir then
				return;
			end
		end
		
		if shouldJump and not inAir then
			selectedSpot[1] = true;
			UserCmd.buttons = bit.bor(UserCmd.buttons, 2);
			return;
		end
		
		if delayTicks ~= 0 then
			if not selectedSpot[4] then
				selectedSpot[4] = globals.TickCount();
				return;
			else
				if globals.TickCount() - selectedSpot[4] >= delayTicks then
					UserCmd.buttons = 0;
				else
					return;
				end
			end
		else
			UserCmd.buttons = 0;
		end
		
		if shouldDuck then
			delayedDuck = 1;
		end
		
		selectedSpot[4] = nil;
		if aimType == 0 then
			selectedSpot[1] = false;
		end
	else
		if not selectedSpot[4] then
			selectedSpot[4] = globals.TickCount();
			selectedSpot[1] = true;
			return;
		end
		
		directional_move(UserCmd, EulerAngles(targetNade[7][tDot][1], targetNade[7][tDot][2], 0), moveSpeed, moveDegrees);
		
		if globals.TickCount() - selectedSpot[4] >= delayTicks then
			
			if delayedEnd then
				if globals.TickCount() - selectedSpot[4] >= delayTicks + 8 then
					delayedEnd = false;
					selectedSpot[4] = nil;
					selectedSpot[1] = false;
					return;
				end
			end
					
			local inAir = (localFlags == 256);	
			if shouldJump and not inAir then 
				UserCmd.buttons = bit.bor(UserCmd.buttons, 2);
				return;
			end
			
			UserCmd.buttons = 0;
			
			if not shouldJump then
				delayedEnd = true;
			end
			
			if not delayedEnd then
				selectedSpot[4] = nil;
					
				if aimType == 0 then
					selectedSpot[1] = false;
				end
			end
		end
	end
end

local function event_handler(event)
	local localPlayer = entities.GetLocalPlayer();
	if not localPlayer then return; end
	
	local eventName = event:GetName();
	if eventName == "item_equip" then
		if entities.GetByUserID(event:GetInt("userid")):GetIndex() == localPlayer:GetIndex() then			
			restore_user_cfg();
		end
	end
end

local function on_unload()
	restore_user_cfg();
end

local function DirectoryExists(dirPath)
	local dirAttrs = ffi.C.GetFileAttributesA(dirPath);
	return (bit.band(dirAttrs, -1) ~= -1) and (bit.band(dirAttrs, 16) == 16);
end

local function FileExists(filePath)
	local dirAttrs = ffi.C.GetFileAttributesA(filePath);
	return (bit.band(dirAttrs, -1) ~= -1) and (bit.band(dirAttrs, 16) ~= 16);
end

local function add_new_nade(x, y, z, ntype, name, yaw, pitch, dist, atype, jump, duck, ticks, speed, degrees)
	local bFind = false;
	
	for i = 1, #NadesData do
		local nadeInfo = NadesData[i];

		if nadeInfo[5] ~= ntype then
			goto continue;
		end
		
		if math.abs(nadeInfo[1] - x) <= 1.5 and math.abs(nadeInfo[2] - y) <= 1.5 and math.abs(nadeInfo[3] - z) <= 1.5 then
			table.insert(NadesData[i][6], name);
			table.insert(NadesData[i][7], { yaw, pitch, dist, atype, jump, duck, ticks, speed, degrees } );
			bFind = true;
			break;
		end
		
		::continue::
	end
	
	if not bFind then 
		table.insert(NadesData, { x, y, z, 0, ntype, { name }, { { yaw, pitch, dist, atype, jump, duck, ticks, speed, degrees } } } );
	end
end

local savedMap = "";
local savedPreset = nil;
local function current_map_logger()
	local currentMap = engine.GetMapName();
	if currentMap == "" then return; end
	
	if savedPreset == nil then savedPreset = guiHelperRageMode:GetValue(); end
	
	if savedMap ~= currentMap or savedPreset ~= guiHelperRageMode:GetValue() then
		NadesData = {};
		selectedSpot = { false, nil, nil, nil };
		savedMap = currentMap;
		savedPreset = guiHelperRageMode:GetValue();
		if not DirectoryExists("Locations") then
			print("[提示] 点位数据库不存在");
			
			if ffi.C.CreateDirectoryA("Locations", nil) then
				print("[提示] 点位数据库创建成功");
			else
				print("[错误] 点位数据库创建失败");
				return;
			end
		end
		
		
		local tempPath = "";
		if guiHelperRageMode:GetValue() then
			tempPath = savedMap .. "_rage";
		else
			tempPath = savedMap .. "_legit";
		end
		
		local filePath = "Locations\\"..tempPath;
		if FileExists(filePath) then
			local countofSpots = 0;
			local countofMolly = 0;
			local countofSmokes = 0;
			local countofFrags = 0;
			local hFile = ffi.cast("void*", ffi.C.CreateFileA(filePath, 0xC0000000, 3, 0, 3, 128, nil))
			if hFile then
				local fileSize = ffi.C.GetFileSize(hFile, nil);
				if fileSize > 0 then
                    local rawData = ffi.new("char[" ..(fileSize + 1).. "]");
					ffi.C.ReadFile(hFile, rawData, fileSize, nil, 0);
					
					for str in string.gmatch(ffi.string(rawData), "([^\n]+)") do
						local parsedData = str:split(";");
						nadeType = tonumber(parsedData[4]);
						add_new_nade(tonumber(parsedData[1]), tonumber(parsedData[2]), tonumber(parsedData[3]), nadeType, 
						parsedData[5], tonumber(parsedData[6]), tonumber(parsedData[7]), tonumber(parsedData[8]), tonumber(parsedData[9]), 
						tonumber(parsedData[10]), tonumber(parsedData[11]), tonumber(parsedData[12]), tonumber(parsedData[13]), tonumber(parsedData[14]))
						
						if nadeType == 1 then
							countofMolly = countofMolly + 1;
						elseif nadeType == 2 then
							countofSmokes = countofSmokes + 1;
						else
							countofFrags = countofFrags + 1;
						end
						
						countofSpots = countofSpots + 1;
					end
				end
				
				ffi.C.CloseHandle(hFile);
			end
			print(":::::::::::::::::::::::::::::::::::::: [点位数据加载成功] :::::::::::::::::::::::::::::::::::");
			print("当前地图:       "..savedMap);
			print("点位总计:    "..countofSpots);
			print("燃烧弹点位: "..countofMolly);
			print("烟雾弹点位:   "..countofSmokes);
			print("手雷点位:      "..countofFrags);
			print("交流论坛:   https://hvh.sh/ ");
		else
			print("[提示] 当前地图 [".. savedMap .. "] 点位数据未找到");
			print("交流论坛:   https://hvh.sh/ ");
		end
	end
end

callbacks.Register("FireGameEvent", event_handler);
callbacks.Register("Draw", gui_handler);
callbacks.Register("Draw", grenade_info);
callbacks.Register("Draw", current_map_logger);
callbacks.Register("CreateMove", movement_helper);
callbacks.Register("Unload", on_unload);